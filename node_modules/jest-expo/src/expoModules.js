module.exports = {
  AIRGoogleMapCalloutManager: {},
  AIRGoogleMapCircleManager: {},
  AIRGoogleMapManager: {
    animateToCoordinate: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapMarkerManager: {
    hideCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapPolygonManager: {},
  AIRGoogleMapPolylineManager: {},
  AIRGoogleMapUrlTileManager: {},
  AIRMapCalloutManager: {},
  AIRMapCircleManager: {},
  AIRMapLocalTileManager: {},
  AIRMapManager: {
    animateToBearing: { type: 'function', functionType: 'async' },
    animateToCoordinate: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    animateToViewingAngle: { type: 'function', functionType: 'async' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRMapMarkerManager: {
    hideCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRMapPolygonManager: {},
  AIRMapPolylineManager: {},
  AIRMapUrlTileManager: {},
  ExpoFaceDetector: {
    Classifications: { type: 'object' },
    Landmarks: { type: 'object' },
    Mode: { type: 'object' },
    detectFaces: { type: 'function', functionType: 'promise' },
  },
  ExpoNativeModuleIntrospection: {
    getNativeModuleNamesAsync: { type: 'function', functionType: 'promise' },
    introspectNativeModuleAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentAV: {
    addListener: { type: 'function', functionType: 'async' },
    getAudioRecordingStatus: { type: 'function', functionType: 'promise' },
    getStatusForSound: { type: 'function', functionType: 'promise' },
    getStatusForVideo: { type: 'function', functionType: 'promise' },
    loadForSound: { type: 'function', functionType: 'async' },
    loadForVideo: { type: 'function', functionType: 'promise' },
    pauseAudioRecording: { type: 'function', functionType: 'promise' },
    prepareAudioRecorder: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
    replaySound: { type: 'function', functionType: 'promise' },
    replayVideo: { type: 'function', functionType: 'promise' },
    setAudioIsEnabled: { type: 'function', functionType: 'promise' },
    setAudioMode: { type: 'function', functionType: 'promise' },
    setErrorCallbackForSound: { type: 'function', functionType: 'async' },
    setStatusForSound: { type: 'function', functionType: 'promise' },
    setStatusForVideo: { type: 'function', functionType: 'promise' },
    startAudioRecording: { type: 'function', functionType: 'promise' },
    stopAudioRecording: { type: 'function', functionType: 'promise' },
    unloadAudioRecorder: { type: 'function', functionType: 'promise' },
    unloadForSound: { type: 'function', functionType: 'promise' },
    unloadForVideo: { type: 'function', functionType: 'promise' },
  },
  ExponentAccelerometer: {
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setUpdateInterval: { type: 'function', functionType: 'async' },
  },
  ExponentAmplitude: {
    clearUserProperties: { type: 'function', functionType: 'async' },
    initialize: { type: 'function', functionType: 'async' },
    logEvent: { type: 'function', functionType: 'async' },
    logEventWithProperties: { type: 'function', functionType: 'async' },
    setGroup: { type: 'function', functionType: 'async' },
    setUserId: { type: 'function', functionType: 'async' },
    setUserProperties: { type: 'function', functionType: 'async' },
  },
  ExponentAppLoadingManager: { finishedAsync: { type: 'function', functionType: 'promise' } },
  ExponentBlurViewManager: {},
  ExponentBrightness: {
    getBrightnessAsync: { type: 'function', functionType: 'promise' },
    setBrightnessAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentCalendar: {
    deleteCalendarAsync: { type: 'function', functionType: 'promise' },
    deleteEventAsync: { type: 'function', functionType: 'promise' },
    deleteReminderAsync: { type: 'function', functionType: 'promise' },
    getAttendeesForEventAsync: { type: 'function', functionType: 'promise' },
    getCalendarsAsync: { type: 'function', functionType: 'promise' },
    getEventByIdAsync: { type: 'function', functionType: 'promise' },
    getEventsAsync: { type: 'function', functionType: 'promise' },
    getReminderByIdAsync: { type: 'function', functionType: 'promise' },
    getRemindersAsync: { type: 'function', functionType: 'promise' },
    getSourceByIdAsync: { type: 'function', functionType: 'promise' },
    getSourcesAsync: { type: 'function', functionType: 'promise' },
    saveCalendarAsync: { type: 'function', functionType: 'promise' },
    saveEventAsync: { type: 'function', functionType: 'promise' },
    saveReminderAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentCameraManager: {
    AutoFocus: { type: 'object' },
    BarCodeType: { type: 'object' },
    FaceDetection: { type: 'object' },
    FlashMode: { type: 'object' },
    Type: { type: 'object' },
    VideoQuality: { type: 'object' },
    WhiteBalance: { type: 'object' },
    record: { type: 'function', functionType: 'promise' },
    stopRecording: { type: 'function', functionType: 'async' },
    takePicture: { type: 'function', functionType: 'promise' },
  },
  ExponentConstants: {
    appOwnership: { type: 'string' },
    deviceId: { type: 'string' },
    deviceName: { type: 'string' },
    deviceYearClass: { type: 'number', mock: 2018 },
    expoRuntimeVersion: { type: 'string' },
    expoVersion: { type: 'string' },
    getWebViewUserAgentAsync: { type: 'function', functionType: 'promise' },
    isDevice: { type: 'boolean', mock: false },
    linkingUri: { type: 'string' },
    manifest: { type: 'object' },
    platform: { type: 'object' },
    sessionId: { type: 'string' },
    statusBarHeight: { type: 'number', mock: 44 },
    systemFonts: { type: 'array' },
  },
  ExponentContacts: { getContactsAsync: { type: 'function', functionType: 'promise' } },
  ExponentDeviceMotion: {
    Gravity: { type: 'number', mock: 9.8100004196167 },
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setUpdateInterval: { type: 'function', functionType: 'async' },
  },
  ExponentDocumentPicker: { getDocumentAsync: { type: 'function', functionType: 'promise' } },
  ExponentErrorRecovery: { setRecoveryProps: { type: 'function', functionType: 'async' } },
  ExponentFacebook: {
    logInWithReadPermissionsAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentFileSystem: {
    addListener: { type: 'function', functionType: 'async' },
    bundleDirectory: { type: 'object', mock: null },
    bundledAssets: { type: 'object', mock: null },
    cacheDirectory: { type: 'string' },
    copyAsync: { type: 'function', functionType: 'promise' },
    deleteAsync: { type: 'function', functionType: 'promise' },
    documentDirectory: { type: 'string' },
    downloadAsync: { type: 'function', functionType: 'promise' },
    downloadResumablePauseAsync: { type: 'function', functionType: 'promise' },
    downloadResumableStartAsync: { type: 'function', functionType: 'promise' },
    getInfoAsync: { type: 'function', functionType: 'promise' },
    makeDirectoryAsync: { type: 'function', functionType: 'promise' },
    moveAsync: { type: 'function', functionType: 'promise' },
    readAsStringAsync: { type: 'function', functionType: 'promise' },
    readDirectoryAsync: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
    writeAsStringAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentFingerprint: {
    authenticateAsync: { type: 'function', functionType: 'promise' },
    hasHardwareAsync: { type: 'function', functionType: 'promise' },
    isEnrolledAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentFontLoader: { loadAsync: { type: 'function', functionType: 'promise' } },
  ExponentGLObjectManager: {
    createObjectAsync: { type: 'function', functionType: 'promise' },
    destroyObjectAsync: { type: 'function', functionType: 'async' },
  },
  ExponentGLViewManager: {
    getARLightEstimation: { type: 'function', functionType: 'sync' },
    getARMatrices: { type: 'function', functionType: 'sync' },
    getPlanes: { type: 'function', functionType: 'sync' },
    getRawFeaturePoints: { type: 'function', functionType: 'sync' },
    setIsLightEstimationEnabled: { type: 'function', functionType: 'async' },
    setIsPlaneDetectionEnabled: { type: 'function', functionType: 'async' },
    setWorldAlignment: { type: 'function', functionType: 'async' },
    startARSessionAsync: { type: 'function', functionType: 'promise' },
    stopARSessionAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentGoogle: { logInAsync: { type: 'function', functionType: 'promise' } },
  ExponentGyroscope: {
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setUpdateInterval: { type: 'function', functionType: 'async' },
  },
  ExponentImageManipulator: { manipulate: { type: 'function', functionType: 'promise' } },
  ExponentImagePicker: {
    launchCameraAsync: { type: 'function', functionType: 'promise' },
    launchImageLibraryAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentKeepAwake: {
    activate: { type: 'function', functionType: 'async' },
    deactivate: { type: 'function', functionType: 'async' },
  },
  ExponentLinearGradientManager: {},
  ExponentLocation: {
    addListener: { type: 'function', functionType: 'async' },
    geocodeAsync: { type: 'function', functionType: 'promise' },
    getCurrentPositionAsync: { type: 'function', functionType: 'promise' },
    getProviderStatusAsync: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
    removeWatchAsync: { type: 'function', functionType: 'promise' },
    reverseGeocodeAsync: { type: 'function', functionType: 'promise' },
    watchDeviceHeading: { type: 'function', functionType: 'promise' },
    watchPositionImplAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentMagnetometer: {
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setUpdateInterval: { type: 'function', functionType: 'async' },
  },
  ExponentMagnetometerUncalibrated: {
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setUpdateInterval: { type: 'function', functionType: 'async' },
  },
  ExponentMailComposer: { composeAsync: { type: 'function', functionType: 'promise' } },
  ExponentNotifications: {
    cancelAllScheduledNotifications: { type: 'function', functionType: 'promise' },
    cancelAllScheduledNotificationsAsync: { type: 'function', functionType: 'promise' },
    cancelScheduledNotification: { type: 'function', functionType: 'async' },
    getBadgeNumberAsync: { type: 'function', functionType: 'promise' },
    getDevicePushTokenAsync: { type: 'function', functionType: 'promise' },
    getExponentPushTokenAsync: { type: 'function', functionType: 'promise' },
    presentLocalNotification: { type: 'function', functionType: 'promise' },
    scheduleLocalNotification: { type: 'function', functionType: 'promise' },
    setBadgeNumberAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentPedometer: {
    addListener: { type: 'function', functionType: 'async' },
    getStepCountAsync: { type: 'function', functionType: 'promise' },
    isAvailableAsync: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
    stopWatchingStepCount: { type: 'function', functionType: 'async' },
    watchStepCount: { type: 'function', functionType: 'async' },
  },
  ExponentPermissions: {
    askAsync: { type: 'function', functionType: 'promise' },
    getAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentSQLite: { exec: { type: 'function', functionType: 'promise' } },
  ExponentScopedModuleRegistry: {},
  ExponentScreenOrientation: { allow: { type: 'function', functionType: 'async' } },
  ExponentSecureStore: {
    AFTER_FIRST_UNLOCK: { type: 'number', mock: 0 },
    AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: { type: 'number', mock: 1 },
    ALWAYS: { type: 'number', mock: 2 },
    ALWAYS_THIS_DEVICE_ONLY: { type: 'number', mock: 4 },
    WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: { type: 'number', mock: 3 },
    WHEN_UNLOCKED: { type: 'number', mock: 5 },
    WHEN_UNLOCKED_THIS_DEVICE_ONLY: { type: 'number', mock: 6 },
    deleteValueWithKeyAsync: { type: 'function', functionType: 'promise' },
    getValueWithKeyAsync: { type: 'function', functionType: 'promise' },
    setValueWithKeyAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentSegment: {
    flush: { type: 'function', functionType: 'async' },
    group: { type: 'function', functionType: 'async' },
    groupWithTraits: { type: 'function', functionType: 'async' },
    identify: { type: 'function', functionType: 'async' },
    identifyWithTraits: { type: 'function', functionType: 'async' },
    initializeAndroid: { type: 'function', functionType: 'async' },
    initializeIOS: { type: 'function', functionType: 'async' },
    reset: { type: 'function', functionType: 'async' },
    screen: { type: 'function', functionType: 'async' },
    screenWithProperties: { type: 'function', functionType: 'async' },
    track: { type: 'function', functionType: 'async' },
    trackWithProperties: { type: 'function', functionType: 'async' },
  },
  ExponentSpeech: {
    addListener: { type: 'function', functionType: 'async' },
    isSpeaking: { type: 'function', functionType: 'promise' },
    pause: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    resume: { type: 'function', functionType: 'async' },
    speak: { type: 'function', functionType: 'async' },
    stop: { type: 'function', functionType: 'async' },
  },
  ExponentUtil: {
    getCurrentDeviceCountryAsync: { type: 'function', functionType: 'promise' },
    getCurrentLocaleAsync: { type: 'function', functionType: 'promise' },
    getCurrentTimeZoneAsync: { type: 'function', functionType: 'promise' },
    reload: { type: 'function', functionType: 'async' },
  },
  ExponentVideoManager: {
    ScaleAspectFill: { type: 'string' },
    ScaleAspectFit: { type: 'string' },
    ScaleNone: { type: 'string' },
    ScaleToFill: { type: 'string' },
    setFullscreen: { type: 'function', functionType: 'promise' },
  },
  ExponentWebBrowser: {
    dismissAuthSession: { type: 'function', functionType: 'async' },
    dismissBrowser: { type: 'function', functionType: 'async' },
    openAuthSessionAsync: { type: 'function', functionType: 'promise' },
    openBrowserAsync: { type: 'function', functionType: 'promise' },
  },
  LottieAnimationView: {
    VERSION: { type: 'number', mock: 1 },
    play: { type: 'function', functionType: 'async' },
    reset: { type: 'function', functionType: 'async' },
  },
  RNAWSCognito: {
    computeModPow: { type: 'function', functionType: 'async' },
    computeS: { type: 'function', functionType: 'async' },
  },
  RNAdMobDFPManager: {},
  RNAdMobInterstitial: {
    isReady: { type: 'function', functionType: 'async' },
    requestAd: { type: 'function', functionType: 'async' },
    setAdUnitID: { type: 'function', functionType: 'async' },
    setTestDeviceID: { type: 'function', functionType: 'async' },
    showAd: { type: 'function', functionType: 'async' },
  },
  RNAdMobManager: {},
  RNAdMobRewarded: {
    isReady: { type: 'function', functionType: 'async' },
    requestAd: { type: 'function', functionType: 'async' },
    setAdUnitID: { type: 'function', functionType: 'async' },
    setTestDeviceID: { type: 'function', functionType: 'async' },
    showAd: { type: 'function', functionType: 'async' },
  },
  RNBranch: {
    ADD_TO_CART_EVENT: { type: 'string' },
    ADD_TO_WISHLIST_EVENT: { type: 'string' },
    INIT_SESSION_ERROR: { type: 'string' },
    INIT_SESSION_SUCCESS: { type: 'string' },
    PURCHASED_EVENT: { type: 'string' },
    PURCHASE_INITIATED_EVENT: { type: 'string' },
    REGISTER_VIEW_EVENT: { type: 'string' },
    SHARE_COMPLETED_EVENT: { type: 'string' },
    SHARE_INITIATED_EVENT: { type: 'string' },
    createUniversalObject: { type: 'function', functionType: 'promise' },
    generateShortUrl: { type: 'function', functionType: 'promise' },
    getCreditHistory: { type: 'function', functionType: 'promise' },
    getFirstReferringParams: { type: 'function', functionType: 'promise' },
    getLatestReferringParams: { type: 'function', functionType: 'promise' },
    getShortUrl: { type: 'function', functionType: 'promise' },
    listOnSpotlight: { type: 'function', functionType: 'promise' },
    loadRewards: { type: 'function', functionType: 'promise' },
    logout: { type: 'function', functionType: 'async' },
    redeemInitSessionResult: { type: 'function', functionType: 'promise' },
    redeemRewards: { type: 'function', functionType: 'promise' },
    registerView: { type: 'function', functionType: 'promise' },
    releaseUniversalObject: { type: 'function', functionType: 'async' },
    setDebug: { type: 'function', functionType: 'async' },
    setIdentity: { type: 'function', functionType: 'async' },
    showShareSheet: { type: 'function', functionType: 'promise' },
    userCompletedAction: { type: 'function', functionType: 'async' },
    userCompletedActionOnUniversalObject: { type: 'function', functionType: 'promise' },
  },
  RNBranchEventEmitter: {
    addListener: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNGestureHandlerButton: {},
  RNGestureHandlerModule: {
    State: { type: 'object' },
    addListener: { type: 'function', functionType: 'async' },
    attachGestureHandler: { type: 'function', functionType: 'async' },
    createGestureHandler: { type: 'function', functionType: 'async' },
    dropGestureHandler: { type: 'function', functionType: 'async' },
    handleClearJSResponder: { type: 'function', functionType: 'async' },
    handleSetJSResponder: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    updateGestureHandler: { type: 'function', functionType: 'async' },
  },
  RNSVGCircleManager: {},
  RNSVGClipPathManager: {},
  RNSVGDefsManager: {},
  RNSVGEllipseManager: {},
  RNSVGGroupManager: {},
  RNSVGImageManager: {},
  RNSVGLineManager: {},
  RNSVGLinearGradientManager: {},
  RNSVGNodeManager: {},
  RNSVGPathManager: {},
  RNSVGRadialGradientManager: {},
  RNSVGRectManager: {},
  RNSVGRenderableManager: {},
  RNSVGSvgViewManager: { toDataURL: { type: 'function', functionType: 'async' } },
  RNSVGSymbolManager: {},
  RNSVGTSpanManager: {},
  RNSVGTextManager: {},
  RNSVGTextPathManager: {},
  RNSVGUseManager: {},
  RNViewShot: { takeSnapshot: { type: 'function', functionType: 'promise' } },
};
