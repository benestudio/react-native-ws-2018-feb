{"version":3,"sources":["detach/IosWorkspace.js"],"names":["async","sdkVersion","versions","await","Versions","versionsAsync","let","sdkVersionConfig","sdkVersions","process","env","EXPO_VIEW_DIR","Error","iosVersion","iosExpoViewUrl","iosClientVersion","_getVersionedExpoKitConfigAsync","context","type","path","join","data","expoSourcePath","expoRootTemplateDirectory","projectPath","isDirectory","mkdirp","sync","console","log","Api","downloadAsync","extract","_getOrCreateTemplateDirectoryAsync","projectDirectory","projectName","gitIgnorePath","fs","existsSync","rimraf","e","filesToTransform","bundleIdentifier","exp","ios","Promise","all","map","fileName","transformFileContentsAsync","fileString","replace","filesToMove","forEach","destFileName","dirname","extname","spawnAsyncThrowError","_renameAndMoveProjectFilesAsync","configFilePath","standaloneSdkVersion","isMultipleVersion","IosPlist","modifyAsync","versionConfig","detachedNativeVersions","shell","kernel","_configureVersionsPlistAsync","constantsConfig","STANDALONE_CONTEXT_TYPE","_configureBuildConstantsPlistAsync","iosProjectDirectory","getPaths","podfileTemplateFilename","podfileSubstitutions","TARGET_NAME","reactNativeDependencyPath","EXPOKIT_TAG","EXPOKIT_PATH","relative","VERSIONED_REACT_NATIVE_PATH","REACT_NATIVE_PATH","EXPOKIT_TAG_IOS","templatePodfilePath","renderPodfileAsync","_renderPodfileFromTemplateAsync","config","version","newestSdkVersionAsync","supportingDirectory","Utils","ncpAsync","rimrafDontThrow","cleanBackupAsync","createDetachedAsync","addDetachedConfigToExp","warn","publishBundlePath","publishManifestPath","intermediatesDirectory","isAnonymous","name","projectNameLabel","toLowerCase","build","workspaceSourcePath","archivePath"],"mappings":"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","file":"../../detach/IosWorkspace.js","sourcesContent":["/**\n * @flow\n */\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport Api from '../Api';\nimport {\n  isDirectory,\n  rimrafDontThrow,\n  spawnAsync,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport { renderPodfileAsync } from './IosPodsTools.js';\nimport * as IosPlist from './IosPlist';\nimport * as Utils from '../Utils';\nimport StandaloneContext from './StandaloneContext';\nimport * as Versions from '../Versions';\n\nasync function _getVersionedExpoKitConfigAsync(sdkVersion: string): any {\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[sdkVersion];\n  if (!sdkVersionConfig) {\n    if (process.env.EXPO_VIEW_DIR) {\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Unsupported SDK version: ${sdkVersion}`);\n    }\n  }\n  const { iosVersion, iosExpoViewUrl } = sdkVersionConfig;\n  const iosClientVersion = iosVersion ? iosVersion : versions.iosVersion;\n  return {\n    iosClientVersion,\n    iosExpoViewUrl,\n  };\n}\n\nasync function _getOrCreateTemplateDirectoryAsync(\n  context: StandaloneContext,\n  iosExpoViewUrl: string\n) {\n  if (context.type === 'service') {\n    return path.join(context.data.expoSourcePath, '..');\n  } else if (context.type === 'user') {\n    let expoRootTemplateDirectory;\n    if (process.env.EXPO_VIEW_DIR) {\n      // Only for testing\n      expoRootTemplateDirectory = process.env.EXPO_VIEW_DIR;\n    } else {\n      // HEY: if you need other paths into the extracted archive, be sure and include them\n      // when the archive is generated in `ios/pipeline.js`\n      expoRootTemplateDirectory = path.join(context.data.projectPath, 'temp-ios-directory');\n      if (!isDirectory(expoRootTemplateDirectory)) {\n        mkdirp.sync(expoRootTemplateDirectory);\n        console.log('Downloading iOS code...');\n        await Api.downloadAsync(iosExpoViewUrl, expoRootTemplateDirectory, {\n          extract: true,\n        });\n      }\n    }\n    return expoRootTemplateDirectory;\n  }\n}\n\nasync function _renameAndMoveProjectFilesAsync(\n  context: StandaloneContext,\n  projectDirectory: string,\n  projectName: string\n) {\n  // remove .gitignore, as this actually pertains to internal expo template management\n  try {\n    const gitIgnorePath = path.join(projectDirectory, '.gitignore');\n    if (fs.existsSync(gitIgnorePath)) {\n      rimraf.sync(gitIgnorePath);\n    }\n  } catch (e) {}\n\n  const filesToTransform = [\n    path.join('exponent-view-template.xcodeproj', 'project.pbxproj'),\n    path.join('exponent-view-template.xcworkspace', 'contents.xcworkspacedata'),\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n  ];\n\n  let bundleIdentifier;\n  if (context.type === 'user') {\n    const exp = context.data.exp;\n    bundleIdentifier = exp.ios && exp.ios.bundleIdentifier ? exp.ios.bundleIdentifier : null;\n    if (!bundleIdentifier) {\n      throw new Error(`Cannot configure an ExpoKit workspace with no iOS bundle identifier.`);\n    }\n  } else if (context.type === 'service') {\n    bundleIdentifier = 'host.exp.Exponent';\n  }\n\n  await Promise.all(\n    filesToTransform.map(fileName =>\n      transformFileContentsAsync(path.join(projectDirectory, fileName), fileString => {\n        return fileString\n          .replace(/com.getexponent.exponent-view-template/g, bundleIdentifier)\n          .replace(/exponent-view-template/g, projectName);\n      })\n    )\n  );\n\n  // order of this array matters\n  const filesToMove = [\n    'exponent-view-template',\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n    'exponent-view-template.xcodeproj',\n    'exponent-view-template.xcworkspace',\n  ];\n\n  filesToMove.forEach(async fileName => {\n    let destFileName = path.join(path.dirname(fileName), `${projectName}${path.extname(fileName)}`);\n    await spawnAsyncThrowError('/bin/mv', [\n      path.join(projectDirectory, fileName),\n      path.join(projectDirectory, destFileName),\n    ]);\n  });\n\n  return;\n}\n\nasync function _configureVersionsPlistAsync(\n  configFilePath: string,\n  standaloneSdkVersion: string,\n  isMultipleVersion: boolean\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXSDKVersions', versionConfig => {\n    if (isMultipleVersion) {\n      delete versionConfig.detachedNativeVersions;\n      // leave versionConfig.sdkVersions unchanged\n      // because the ExpoKit template already contains the list of supported versions.\n    } else {\n      versionConfig.sdkVersions = [standaloneSdkVersion];\n      versionConfig.detachedNativeVersions = {\n        shell: standaloneSdkVersion,\n        kernel: standaloneSdkVersion,\n      };\n    }\n    return versionConfig;\n  });\n}\n\nasync function _configureBuildConstantsPlistAsync(\n  configFilePath: string,\n  context: StandaloneContext\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXBuildConstants', constantsConfig => {\n    constantsConfig.STANDALONE_CONTEXT_TYPE = context.type;\n    return constantsConfig;\n  });\n  return;\n}\n\nasync function _renderPodfileFromTemplateAsync(\n  context: StandaloneContext,\n  expoRootTemplateDirectory: string,\n  sdkVersion: string,\n  iosClientVersion: string\n) {\n  const { iosProjectDirectory, projectName } = getPaths(context);\n  let podfileTemplateFilename;\n  let podfileSubstitutions: any = {\n    TARGET_NAME: projectName,\n  };\n  let reactNativeDependencyPath;\n  if (context.type === 'user') {\n    reactNativeDependencyPath = path.join(context.data.projectPath, 'node_modules', 'react-native');\n    podfileSubstitutions.EXPOKIT_TAG = `ios/${iosClientVersion}`;\n    podfileTemplateFilename = 'ExpoKit-Podfile';\n  } else if (context.type === 'service') {\n    reactNativeDependencyPath = path.join(\n      expoRootTemplateDirectory,\n      '..',\n      'react-native-lab',\n      'react-native'\n    );\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      expoRootTemplateDirectory\n    );\n    podfileSubstitutions.VERSIONED_REACT_NATIVE_PATH = path.relative(\n      iosProjectDirectory,\n      path.join(expoRootTemplateDirectory, 'ios', 'versioned-react-native')\n    );\n    podfileTemplateFilename = 'ExpoKit-Podfile-multiple-versions';\n  } else {\n    throw new Error(`Unsupported context type: ${context.type}`);\n  }\n  podfileSubstitutions.REACT_NATIVE_PATH = path.relative(\n    iosProjectDirectory,\n    reactNativeDependencyPath\n  );\n\n  // env flags for testing\n  if (process.env.EXPOKIT_TAG_IOS) {\n    console.log(`EXPOKIT_TAG_IOS: Using custom ExpoKit iOS tag...`);\n    podfileSubstitutions.EXPOKIT_TAG = process.env.EXPOKIT_TAG_IOS;\n  } else if (process.env.EXPO_VIEW_DIR) {\n    console.log('EXPO_VIEW_DIR: Using local ExpoKit source for iOS...');\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      process.env.EXPO_VIEW_DIR\n    );\n  }\n  const templatePodfilePath = path.join(\n    expoRootTemplateDirectory,\n    'template-files',\n    'ios',\n    podfileTemplateFilename\n  );\n  await renderPodfileAsync(\n    templatePodfilePath,\n    path.join(iosProjectDirectory, 'Podfile'),\n    podfileSubstitutions,\n    sdkVersion\n  );\n}\n\nasync function createDetachedAsync(context: StandaloneContext) {\n  let isMultipleVersion, standaloneSdkVersion;\n  if (context.type === 'user') {\n    standaloneSdkVersion = context.config.sdkVersion;\n    isMultipleVersion = false;\n  } else if (context.type === 'service') {\n    const { version } = await Versions.newestSdkVersionAsync();\n    standaloneSdkVersion = version;\n    isMultipleVersion = true;\n  }\n  const { iosProjectDirectory, projectName, supportingDirectory } = getPaths(context);\n  console.log(`Creating ExpoKit workspace at ${iosProjectDirectory}...`);\n\n  const { iosClientVersion, iosExpoViewUrl } = await _getVersionedExpoKitConfigAsync(\n    standaloneSdkVersion\n  );\n  const expoRootTemplateDirectory = await _getOrCreateTemplateDirectoryAsync(\n    context,\n    iosExpoViewUrl\n  );\n\n  // copy template workspace\n  console.log('Moving iOS project files...');\n  console.log('Attempting to create project directory...');\n  console.log(`project dir: ${iosProjectDirectory}`);\n  mkdirp.sync(iosProjectDirectory);\n  console.log('Created project directory! Copying files:');\n  await Utils.ncpAsync(\n    path.join(expoRootTemplateDirectory, 'exponent-view-template', 'ios'),\n    iosProjectDirectory\n  );\n\n  console.log('Naming iOS project...');\n  await _renameAndMoveProjectFilesAsync(context, iosProjectDirectory, projectName);\n\n  console.log('Configuring iOS dependencies...');\n  // this configuration must happen prior to build time because it affects which\n  // native versions of RN we depend on.\n  await _configureVersionsPlistAsync(supportingDirectory, standaloneSdkVersion, isMultipleVersion);\n  await _configureBuildConstantsPlistAsync(supportingDirectory, context);\n  await _renderPodfileFromTemplateAsync(\n    context,\n    expoRootTemplateDirectory,\n    standaloneSdkVersion,\n    iosClientVersion\n  );\n\n  if (!process.env.EXPO_VIEW_DIR) {\n    if (context.type === 'user') {\n      rimrafDontThrow(expoRootTemplateDirectory);\n    }\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'EXSDKVersions', false);\n  }\n\n  return;\n}\n\nfunction addDetachedConfigToExp(exp: any, context: StandaloneContext): any {\n  if (context.type !== 'user') {\n    console.warn(`Tried to modify exp for a non-user StandaloneContext, ignoring`);\n    return;\n  }\n  if (!exp) {\n    exp = {};\n  }\n  const { supportingDirectory } = getPaths(context);\n  exp.ios.publishBundlePath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app.bundle')\n  );\n  exp.ios.publishManifestPath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app-manifest.json')\n  );\n  return exp;\n}\n\n/**\n *  paths returned:\n *    iosProjectDirectory - root directory of an (uncompiled) xcworkspace and obj-c source tree\n *    projectName - xcworkspace project name normalized from context.config\n *    supportingDirectory - location of Info.plist, xib files, etc. during configuration.\n *      for an unbuilt app this is underneath iosProjectDirectory. for a compiled app it's just\n *      a path to the flat xcarchive.\n *    intermediatesDirectory - temporary spot to write whatever files are needed during the\n *      detach/build process but can be discarded afterward.\n */\nfunction getPaths(context: StandaloneContext) {\n  let iosProjectDirectory;\n  let projectName;\n  let supportingDirectory;\n  let intermediatesDirectory;\n  if (context.isAnonymous()) {\n    projectName = 'ExpoKitApp';\n  } else if (context.config && context.config.name) {\n    let projectNameLabel = context.config.name;\n    projectName = projectNameLabel.replace(/[^a-z0-9_\\-]/gi, '-').toLowerCase();\n  } else {\n    throw new Error('Cannot configure an Expo project with no name.');\n  }\n  if (context.type === 'user') {\n    iosProjectDirectory = path.join(context.data.projectPath, 'ios');\n    supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n  } else if (context.type === 'service') {\n    iosProjectDirectory = context.build.ios.workspaceSourcePath;\n    if (context.data.archivePath) {\n      // compiled archive has a flat NSBundle\n      supportingDirectory = context.data.archivePath;\n    } else {\n      supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n    }\n  } else {\n    throw new Error(`Unsupported StandaloneContext type: ${context.type}`);\n  }\n  // sandbox intermediates directory by workspace so that concurrently operating\n  // contexts do not interfere with one another.\n  intermediatesDirectory = path.join(iosProjectDirectory, 'ExpoKitIntermediates');\n  return {\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  };\n}\n\nexport { addDetachedConfigToExp, createDetachedAsync, getPaths };\n"],"sourceRoot":"/xdl/src"}