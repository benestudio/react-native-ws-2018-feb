{"version":3,"sources":["detach/IosAssetArchive.js"],"names":["async","context","destinationCARPath","intermediatesDirectory","type","Error","mkdirp","sync","await","spawnAsyncThrowError","path","join","data","expoSourcePath","stdio","IosIcons","createAndWriteIconsToPathAsync","let","xcrunargs","concat","relative","cwd","buildAssetArchiveAsync"],"mappings":";;;;;;;AAWA;;;;+BAGAA,WACEC,OADFD,EAEEE,kBAFFF,EAGEG,sBAHFH,EAIE;AACA,QAAIC,QAAQG,IAARH,KAAiB,SAArB,EAAgC;AAC9B,YAAM,IAAII,KAAJ,CAAU,sEAAV,CAAN;AACF;AACAC,wCAAOC,IAAPD,CAAYH,sBAAZG;;AAEA;AACAE,UAAMC,oEACJ,SADIA,EAEJ,CACE,IADF,EAEEC,cAAKC,IAALD,CAAUT,QAAQW,IAARX,CAAaY,cAAvBH,EAAuC,UAAvCA,EAAmD,iBAAnDA,CAFF,EAGEA,cAAKC,IAALD,CAAUP,sBAAVO,EAAkC,iBAAlCA,CAHF,CAFID,EAOJ;AACEK,aAAO;AADT,KAPIL,CAAND;;AAYA;AACAA,UAAMO,gCAASC,8BAATD,CACJd,OADIc,EAEJL,cAAKC,IAALD,CAAUP,sBAAVO,EAAkC,iBAAlCA,EAAqD,oBAArDA,CAFIK,CAANP;;AAKA;AACAS,QAAIC,YAAY,GAAGC,MAAH,CACd,CAAC,QAAD,CADc,EAEd,CAAC,6BAAD,EAAgC,KAAhC,CAFc,EAGd,CAAC,YAAD,EAAe,UAAf,CAHc,EAId,CAAC,YAAD,EAAe,SAAf,CAJc,EAKd,CAAC,6BAAD,EAAgC,mCAAhC,CALc,EAMd,CAAC,iBAAD,CANc,EAOd,CAAC,8BAAD,EAAiC,KAAjC,CAPc,EAQd,CAAC,gBAAD,EAAmB,oCAAnB,CARc,EASd,CAAC,iBAAD,EAAoB,QAApB,CATc,EAUd,CAAC,iBAAD,EAAoB,MAApB,CAVc,EAWd,CAAC,WAAD,EAAcT,cAAKU,QAALV,CAAcP,sBAAdO,EAAsCR,kBAAtCQ,CAAd,CAXc,EAYd,CAAC,iBAAD,CAZc,CAAhBO;AAcA;;;;;AAKAT,UAAMC,oEAAqB,OAArBA,EAA8BS,SAA9BT,EAAyC;AAC7CK,aAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CADsC,EACP;AACtCO,WAAKlB;AAFwC,KAAzCM,CAAND;;AAKA;AACF,G;;kBAvDec,sB;;;;;;;AAVf;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;QA8DSA,sB,GAAAA,sB","file":"../../detach/IosAssetArchive.js","sourcesContent":["/**\n *  @flow\n */\n\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nimport { spawnAsyncThrowError } from './ExponentTools';\nimport * as IosIcons from './IosIcons';\nimport StandaloneContext from './StandaloneContext';\n\n/**\n *  Compile a .car file from the icons in a manifest.\n */\nasync function buildAssetArchiveAsync(\n  context: StandaloneContext,\n  destinationCARPath: string,\n  intermediatesDirectory: string\n) {\n  if (context.type !== 'service') {\n    throw new Error('buildAssetArchive is only supported for service standalone contexts.');\n  }\n  mkdirp.sync(intermediatesDirectory);\n\n  // copy expoSourceRoot/.../Images.xcassets into intermediates\n  await spawnAsyncThrowError(\n    '/bin/cp',\n    [\n      '-R',\n      path.join(context.data.expoSourcePath, 'Exponent', 'Images.xcassets'),\n      path.join(intermediatesDirectory, 'Images.xcassets'),\n    ],\n    {\n      stdio: 'inherit',\n    }\n  );\n\n  // make the new xcassets contain the project's icon\n  await IosIcons.createAndWriteIconsToPathAsync(\n    context,\n    path.join(intermediatesDirectory, 'Images.xcassets', 'AppIcon.appiconset')\n  );\n\n  // compile asset archive\n  let xcrunargs = [].concat(\n    ['actool'],\n    ['--minimum-deployment-target', '9.0'],\n    ['--platform', 'iphoneos'],\n    ['--app-icon', 'AppIcon'],\n    ['--output-partial-info-plist', 'assetcatalog_generated_info.plist'],\n    ['--compress-pngs'],\n    ['--enable-on-demand-resources', 'YES'],\n    ['--product-type', 'com.apple.product-type.application'],\n    ['--target-device', 'iphone'],\n    ['--target-device', 'ipad'],\n    ['--compile', path.relative(intermediatesDirectory, destinationCARPath)],\n    ['Images.xcassets']\n  );\n  /*\n   *  Note: if you want to debug issues with `actool`, try changing to stdio: 'inherit'.\n   *  In both success and failure cases, actool will write an enormous .plist to stdout\n   *  which may contain the key `com.apple.actool.errors`. Great work Apple\n   */\n  await spawnAsyncThrowError('xcrun', xcrunargs, {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: intermediatesDirectory,\n  });\n\n  return;\n}\n\nexport { buildAssetArchiveAsync };\n"],"sourceRoot":"/xdl/src"}