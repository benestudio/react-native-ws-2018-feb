{"version":3,"sources":["detach/StandaloneContext.js"],"names":["StandaloneContext","isAnonymous","type","config","createUserContext","projectPath","exp","publishedUrl","let","context","data","published","url","releaseChannel","build","StandaloneBuildFlags","createEmpty","createServiceContext","expoSourcePath","archivePath","manifest","privateConfig"],"mappings":";;;;;;;;AAIA;AAAA;AAAA;;;;AAIA;;;;;;AASA;;;;AAWA,MAAMA,iBAAN,CAAwB;AAAA;AAAA,SA6DtBC,WA7DsB,GA6DR,MAAM;AAClB,aAAO,KAAKC,IAAL,KAAc,SAAd,IAA2B,CAAC,KAAKC,MAAxC;AACD,KA/DqB;AAAA,IAGV;;;AAsDZ;;;;;;AAzDsB;;AAAlBH,iB,CAUGI,iB,GAAoB,CACzBC,WADyB,EAEzBC,GAFyB,EAGzBC,YAHyB,KAIH;AACtBC,MAAIC,UAAU,IAAIT,iBAAJ,EAAdQ;AACAC,UAAQP,IAARO,GAAe,MAAfA;AACAA,UAAQC,IAARD,GAAe;AACbJ,eADa;AAEbC;AAFa,GAAfG;AAIAA,UAAQN,MAARM,GAAiBH,GAAjBG;AACAA,UAAQE,SAARF,GAAoB;AAClBG,SAAKL,YADa;AAElBM,oBAAgB;AAFE,GAApBJ;AAIA;AACAA,UAAQK,KAARL,GAAgBM,gEAAqBC,WAArBD,EAAhBN;AACA,SAAOA,OAAP;AACD,C;;AA7BGT,iB,CA+BGiB,oB,GAAuB,CAC5BC,cAD4B,EAE5BC,WAF4B,EAG5BC,QAH4B,EAI5BC,aAJ4B,EAK5BP,KAL4B,EAM5BP,YAN4B,EAO5BM,cAP4B,KAQN;AACtBL,MAAIC,UAAU,IAAIT,iBAAJ,EAAdQ;AACAC,UAAQP,IAARO,GAAe,SAAfA;AACAA,UAAQC,IAARD,GAAe;AACbS,kBADa;AAEbC,eAFa;AAGbC,YAHa;AAIbC;AAJa,GAAfZ;AAMAA,UAAQN,MAARM,GAAiBW,QAAjBX;AACAA,UAAQK,KAARL,GAAgBK,KAAhBL;AACAA,UAAQE,SAARF,GAAoB;AAClBG,SAAKL,YADa;AAElBM,oBAAgBA,iBAAiBA,cAAjBA,GAAkC;AAFhC,GAApBJ;AAIA,SAAOA,OAAP;AACD,C;;kBAWYT,iB","file":"../../detach/StandaloneContext.js","sourcesContent":["/**\n * @flow\n */\n\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\n\ntype StandaloneContextDataType = 'user' | 'service';\n\n/**\n *  A user context is used when we are configuring a standalone app locally on a user's machine,\n *  such as during `exp detach`.\n */\ntype StandaloneContextDataUser = {\n  projectPath: string,\n  exp: any,\n};\n\n/**\n *  A service context is used when we are generating a standalone app remotely on an Expo\n *  service machine, such as during `exp build`.\n */\ntype StandaloneContextDataService = {\n  expoSourcePath: string,\n  archivePath: ?string,\n  manifest: ?any,\n  privateConfig: ?any,\n};\n\nclass StandaloneContext {\n  type: StandaloneContextDataType;\n  data: StandaloneContextDataUser | StandaloneContextDataService;\n  config: ?any; // same as underlying app.json or manifest\n  published: {\n    url: ?string,\n    releaseChannel: string,\n  };\n  build: StandaloneBuildFlags;\n\n  static createUserContext = (\n    projectPath: string,\n    exp: any,\n    publishedUrl: ?string\n  ): StandaloneContext => {\n    let context = new StandaloneContext();\n    context.type = 'user';\n    context.data = {\n      projectPath,\n      exp,\n    };\n    context.config = exp;\n    context.published = {\n      url: publishedUrl,\n      releaseChannel: 'default',\n    };\n    // we never expect to handle the build step for user contexts right now\n    context.build = StandaloneBuildFlags.createEmpty();\n    return context;\n  };\n\n  static createServiceContext = (\n    expoSourcePath: string,\n    archivePath: ?string,\n    manifest: ?any,\n    privateConfig: ?any,\n    build: StandaloneBuildFlags,\n    publishedUrl: ?string,\n    releaseChannel: ?string\n  ): StandaloneContext => {\n    let context = new StandaloneContext();\n    context.type = 'service';\n    context.data = {\n      expoSourcePath,\n      archivePath,\n      manifest,\n      privateConfig,\n    };\n    context.config = manifest;\n    context.build = build;\n    context.published = {\n      url: publishedUrl,\n      releaseChannel: releaseChannel ? releaseChannel : 'default',\n    };\n    return context;\n  };\n\n  /**\n   *  On iOS we begin configuring standalone apps before we have any information about the\n   *  project's manifest.\n   */\n  isAnonymous = () => {\n    return this.type === 'service' && !this.config;\n  };\n}\n\nexport default StandaloneContext;\n"],"sourceRoot":"/xdl/src"}