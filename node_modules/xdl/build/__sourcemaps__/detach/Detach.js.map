{"version":3,"sources":["detach/Detach.js"],"names":["async","projectRoot","options","let","user","await","UserManager","ensureLoggedInAsync","Error","username","exp","ProjectUtils","readConfigJsonAsync","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","ErrorCode","DIRECTORY_ALREADY_EXISTS","process","platform","response","yesnoAsync","console","log","configName","configFilenameAsync","name","android","package","sdkVersion","majorSdkVersion","parseSdkMajorVersion","versions","Versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","warn","isDetached","detach","scheme","detachedUUID","uuid","v4","replace","expoDirectory","mkdirp","sync","context","StandaloneContext","createUserContext","isIosSupported","force","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","androidDirectory","rimraf","gteSdkVersion","detachAndroidAsync","OldAndroidDetach","nameToWrite","expo","fs","writeFile","JSON","stringify","detachAsync","createDetachedAsync","IosNSBundle","configureAsync","filename","regex","file","readFile","fileString","toString","regexFileAsync","expoViewUrl","type","androidProjectDirectory","data","projectPath","tmpExpoDirectory","AndroidShellApp","copyInitialShellAppFilesAsync","Api","downloadAsync","extract","runShellAppModificationsAsync","rimrafDontThrow","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","ensureBuildConstantsExistsIOSAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","expoKitVersionRegex","match","exec","e","_getIosExpoKitVersionThrowErrorAsync","projectDir","args","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","prepareDetachedBuildIosAsync","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","createServiceContext","supportingDirectory","getPaths","prodApiKeys","_readDefaultApiKeysAsync","expoSourcePath","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","DEFAULT_API_KEYS","jsonFilePath","keys","allKeys","readAsync","validKeys","key","hasOwnProperty","includes","podsDirectory","rnPodDirectory","rnFilesToDelete","glob","i","length","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","buildConstantsFileName","expoBuildConstantsMatches","expoBuildConstants","prepareDetachedBuildAsync","question","Promise","resolve","yesno","ask","ok"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport mkdirp from 'mkdirp';\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport glob from 'glob-promise';\nimport uuid from 'uuid';\nimport yesno from 'yesno';\n\nimport {\n  isDirectory,\n  parseSdkMajorVersion,\n  saveImageToPathAsync,\n  rimrafDontThrow,\n} from './ExponentTools';\n\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport * as AndroidShellApp from './AndroidShellApp';\nimport * as OldAndroidDetach from './OldAndroidDetach';\n\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Utils from '../Utils';\nimport * as Versions from '../Versions';\n\nfunction yesnoAsync(question) {\n  return new Promise(resolve => {\n    yesno.ask(question, null, ok => {\n      resolve(ok);\n    });\n  });\n}\n\nexport async function detachAsync(projectRoot: string, options: any) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      ErrorCode.DIRECTORY_ALREADY_EXISTS,\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      console.log('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  console.log('Validating project manifest...');\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.android || !exp.android.package) {\n    throw new Error(\n      `${configName} is missing android.package field. See https://docs.expo.io/versions/latest/guides/configuration.html#package`\n    );\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  let majorSdkVersion = parseSdkMajorVersion(exp.sdkVersion);\n  if (majorSdkVersion < 16) {\n    throw new Error(`${configName} must be updated to SDK 16.0.0 or newer to be detached.`);\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    !sdkVersionConfig.androidExpoViewUrl ||\n    !sdkVersionConfig.iosExpoViewUrl\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      console.warn(\n        `Detaching is not supported for SDK ${exp.sdkVersion}; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  // Modify exp.json\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  if (!exp.detach.scheme) {\n    let detachedUUID = uuid.v4().replace(/-/g, '');\n    exp.detach.scheme = `exp${detachedUUID}`;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  mkdirp.sync(expoDirectory);\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      console.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      console.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n  if (!hasIosDirectory && isIosSupported) {\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory) {\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    mkdirp.sync(androidDirectory);\n    if (Versions.gteSdkVersion(exp, '24.0.0')) {\n      await detachAndroidAsync(context, sdkVersionConfig.androidExpoViewUrl);\n    } else {\n      await OldAndroidDetach.detachAndroidAsync(\n        projectRoot,\n        androidDirectory,\n        exp.sdkVersion,\n        experienceUrl,\n        exp,\n        sdkVersionConfig.androidExpoViewUrl\n      );\n    }\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  console.log('Writing ExpoKit configuration...');\n  // Update exp.json/app.json\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const nameToWrite = await ProjectUtils.configFilenameAsync(projectRoot);\n  if (nameToWrite === 'app.json') {\n    exp = { expo: exp };\n  }\n  await fs.writeFile(path.join(projectRoot, nameToWrite), JSON.stringify(exp, null, 2));\n\n  console.log(\n    'Finished detaching your project! Look in the `android` and `ios` directories for the respective native projects. Follow the ExpoKit guide at https://docs.expo.io/versions/latest/guides/expokit.html to get your project running.\\n'\n  );\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context: StandaloneContext) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  console.log('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  console.log(`iOS detach is complete!`);\n}\n\nasync function regexFileAsync(filename, regex, replace) {\n  let file = await fs.readFile(filename);\n  let fileString = file.toString();\n  await fs.writeFile(filename, fileString.replace(regex, replace));\n}\n\nasync function detachAndroidAsync(context: StandaloneContext, expoViewUrl: string) {\n  if (context.type !== 'user') {\n    throw new Error(`detachAndroidAsync only supports user standalone contexts`);\n  }\n\n  console.log('Moving Android project files...');\n  let androidProjectDirectory = path.join(context.data.projectPath, 'android');\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      path.join(process.env.EXPO_VIEW_DIR, 'android'),\n      androidProjectDirectory,\n      true\n    );\n  } else {\n    tmpExpoDirectory = path.join(context.data.projectPath, 'temp-android-directory');\n    mkdirp.sync(tmpExpoDirectory);\n    console.log('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      tmpExpoDirectory,\n      androidProjectDirectory,\n      true\n    );\n  }\n\n  console.log('Updating Android app...');\n  await AndroidShellApp.runShellAppModificationsAsync(context, true);\n\n  // Clean up\n  console.log('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  console.log('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    console.log('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9\\.]+)\\)/gi;\n    let match = expoKitVersionRegex.exec(podfileLock);\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (exp) {\n    return prepareDetachedUserContextIosAsync(projectDir, exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const workspaceSourcePath = path.join(projectDir, 'default');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  const context = StandaloneContext.createServiceContext(\n    path.join(projectDir, '..', '..'),\n    null,\n    null,\n    null,\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    return constantsConfig;\n  });\n  return;\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    let keys = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: any, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  console.log(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = await glob(rnPodDirectory + '/**/*.@(js|json)');\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n    let buildConstantsFileName = Versions.gteSdkVersion(exp, '24.0.0')\n      ? 'DetachBuildConstants.java'\n      : 'ExponentBuildConstants.java';\n\n    let androidProjectDirectory = path.join(projectDir, 'android');\n    let expoBuildConstantsMatches = await glob(\n      androidProjectDirectory + '/**/' + buildConstantsFileName\n    );\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        expoBuildConstants,\n        /DEVELOPMENT_URL \\= \\\"[^\\\"]*\\\"\\;/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`\n      );\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}