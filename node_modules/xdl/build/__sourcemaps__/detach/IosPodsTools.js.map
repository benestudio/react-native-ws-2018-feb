{"version":3,"sources":["detach/IosPodsTools.js"],"names":["async","templatesDirectory","versionedReactNativePath","expoSubspecs","let","result","await","_concatTemplateFilesInDirectoryAsync","path","join","map","subspec","replace","_renderVersionedReactNativeDependenciesAsync","_renderVersionedReactNativePostinstallsAsync","directory","templateFilenames","glob","templateStrings","Promise","all","filename","templateString","fs","readFile","push","dependenciesConfigPath","options","dependencies","readAsync","type","isPodfile","depsStrings","dependency","name","version","_renderPodDependenciesAsync","pathToTemplate","pathToOutput","moreSubstitutions","dirname","indentString","IOS_EXPONENT_CLIENT_VERSION","writeFile","renderExpoKitPodspecAsync","sdkVersion","reactNativePath","REACT_NATIVE_PATH","rnDependencyOptions","expoKitPath","EXPOKIT_PATH","expoKitTag","EXPOKIT_TAG","expoKitDependencyOptions","versionedRnPath","VERSIONED_REACT_NATIVE_PATH","rnExpoSubspecs","REACT_NATIVE_EXPO_SUBSPECS","versionedDependencies","versionedPostinstalls","podDependencies","substitutions","EXPONENT_CLIENT_DEPS","EXPOKIT_DEPENDENCY","_renderExpoKitDependency","PODFILE_UNVERSIONED_RN_DEPENDENCY","_renderUnversionedReactNativeDependency","PODFILE_UNVERSIONED_POSTINSTALL","_renderUnversionedPostinstall","PODFILE_DETACHED_POSTINSTALL","_renderDetachedPostinstall","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_VERSIONED_POSTINSTALLS","PODFILE_TEST_TARGET","_renderTestTarget","_validatePodfileSubstitutions","key","hasOwnProperty","replacement","RegExp","renderPodfileAsync","validKeys","includes","Error","attributes","git","tag","branch","subspecs","_renderDependencyAttributes","sdkMajorVersion","parseSdkMajorVersion","_renderUnversionedReactDependency","_renderUnversionedYogaDependency","_renderUnversionedThirdPartyDependency","podName","podspecRelativePath","podspec","inhibit_warnings","attributesStrings","Object","keys","value","JSON","stringify","podsRootSub","podsToChangeDeployTarget","podsToChangeRB","pod"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport glob from 'glob-promise';\nimport indentString from 'indent-string';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { parseSdkMajorVersion } from './ExponentTools';\n\nfunction _validatePodfileSubstitutions(substitutions) {\n  const validKeys = [\n    // a pod dependency on ExpoKit (can be local or remote)\n    'EXPOKIT_DEPENDENCY',\n    // local path to ExpoKit dependency\n    'EXPOKIT_PATH',\n    // tag to use for ExpoKit dependency\n    'EXPOKIT_TAG',\n    // the contents of dependencies.json enumerated as deps in podfile format\n    'EXPONENT_CLIENT_DEPS',\n    // postinstall for detached projects (defines EX_DETACHED among other things)\n    'PODFILE_DETACHED_POSTINSTALL',\n    // ExponentIntegrationTests\n    'PODFILE_TEST_TARGET',\n    // unversioned react native pod dependency, probably at the path given in\n    // REACT_NATIVE_PATH, with a bunch of subspecs.\n    'PODFILE_UNVERSIONED_RN_DEPENDENCY',\n    // postinstall hook for unversioned deps\n    'PODFILE_UNVERSIONED_POSTINSTALL',\n    // versioned rn dependencies (paths to versioned-react-native directories)\n    // read from template files\n    'PODFILE_VERSIONED_RN_DEPENDENCIES',\n    // versioned rn postinstall hooks read from template files\n    'PODFILE_VERSIONED_POSTINSTALLS',\n    // list of generated Expo subspecs to include under a versioned react native dependency\n    'REACT_NATIVE_EXPO_SUBSPECS',\n    // path to use for the unversioned react native dependency\n    'REACT_NATIVE_PATH',\n    // name of the main build target, e.g. Exponent\n    'TARGET_NAME',\n    // path from Podfile to versioned-react-native\n    'VERSIONED_REACT_NATIVE_PATH',\n  ];\n\n  for (const key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      if (!validKeys.includes(key)) {\n        throw new Error(`Unrecognized Podfile template key: ${key}`);\n      }\n    }\n  }\n  return true;\n}\n\nfunction _renderExpoKitDependency(options) {\n  let attributes;\n  if (options.expoKitPath) {\n    attributes = {\n      path: options.expoKitPath,\n    };\n  } else if (options.expoKitTag) {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      tag: options.expoKitTag,\n    };\n  } else {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      branch: 'master',\n    };\n  }\n  attributes.subspecs = ['Core', 'CPP'];\n\n  let dependency = `pod 'ExpoKit',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n\n  return indentString(dependency, 2);\n}\n\n/**\n * @param sdkVersion if specified, indicates which sdkVersion this project uses\n *  as 'UNVERSIONED', e.g. if we are detaching a sdk15 project, we render\n *  an unversioned dependency pointing at RN#sdk-15.\n */\nfunction _renderUnversionedReactNativeDependency(options, sdkVersion) {\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (sdkMajorVersion === 14) {\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options)}\n`,\n      2\n    );\n  } else if (sdkMajorVersion < 21) {\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n`,\n      2\n    );\n  } else {\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n${_renderUnversionedThirdPartyDependency(\n        'DoubleConversion',\n        path.join('third-party-podspecs', 'DoubleConversion.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        'Folly',\n        path.join('third-party-podspecs', 'Folly.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        'GLog',\n        path.join('third-party-podspecs', 'GLog.podspec'),\n        options\n      )}\n`,\n      2\n    );\n  }\n}\n\nfunction _renderUnversionedReactDependency(options, sdkVersion) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: options.reactNativePath,\n    };\n  } else {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n\n  attributes.subspecs = [\n    'Core',\n    'ART',\n    'RCTActionSheet',\n    'RCTAnimation',\n    'RCTCameraRoll',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n  ];\n\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (!(sdkMajorVersion < 16)) {\n    attributes.subspecs.push('DevSupport');\n  }\n  if (!(sdkMajorVersion < 21)) {\n    attributes.subspecs.push('CxxBridge');\n  } else if (!(sdkMajorVersion < 18)) {\n    attributes.subspecs.push('BatchedBridge');\n  }\n\n  return `pod 'React',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedYogaDependency(options, sdkVersion) {\n  let attributes;\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(\n        options.reactNativePath,\n        'ReactCommon',\n        sdkMajorVersion < 22 ? 'Yoga' : 'yoga'\n      ),\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod '${sdkMajorVersion < 22 ? 'Yoga' : 'yoga'}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedThirdPartyDependency(podName, podspecRelativePath, options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      podspec: path.join(options.reactNativePath, podspecRelativePath),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for ${podName} dependency: ${options}`);\n  }\n  return `pod '${podName}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderDependencyAttributes(attributes) {\n  let attributesStrings = [];\n  for (let key of Object.keys(attributes)) {\n    let value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nasync function _renderVersionedReactNativeDependenciesAsync(\n  templatesDirectory,\n  versionedReactNativePath,\n  expoSubspecs\n) {\n  let result = await _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'dependencies')\n  );\n  expoSubspecs = expoSubspecs.map(subspec => `'${subspec}'`).join(', ');\n  result = result.replace(/\\$\\{VERSIONED_REACT_NATIVE_PATH\\}/g, versionedReactNativePath);\n  result = result.replace(/\\$\\{REACT_NATIVE_EXPO_SUBSPECS\\}/g, expoSubspecs);\n  return result;\n}\n\nasync function _renderVersionedReactNativePostinstallsAsync(templatesDirectory) {\n  return _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'postinstalls')\n  );\n}\n\nasync function _concatTemplateFilesInDirectoryAsync(directory) {\n  let templateFilenames = await glob(path.join(directory, '*.rb'));\n  let templateStrings = [];\n  await Promise.all(\n    templateFilenames.map(async filename => {\n      let templateString = await fs.readFile(filename, 'utf8');\n      if (templateString) {\n        templateStrings.push(templateString);\n      }\n    })\n  );\n  return templateStrings.join('\\n');\n}\n\nfunction _renderDetachedPostinstall(sdkVersion) {\n  let podsRootSub = '${PODS_ROOT}';\n  return `\n    if target.pod_name == 'ExpoKit'\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n        # needed for GoogleMaps 2.x\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'\n      end\n    end\n`;\n}\n\nfunction _renderUnversionedPostinstall() {\n  // TODO: switch to `installer.pods_project.targets.each` in postinstall\n  // see: https://stackoverflow.com/questions/37160688/set-deployment-target-for-cocoapodss-pod\n  const podsToChangeDeployTarget = [\n    'Amplitude-iOS',\n    'Analytics',\n    'AppAuth',\n    'Branch',\n    'CocoaLumberjack',\n    'FBSDKCoreKit',\n    'FBSDKLoginKit',\n    'FBSDKShareKit',\n    'GPUImage',\n    'JKBigInteger2',\n  ];\n  const podsToChangeRB = `[${podsToChangeDeployTarget.map(pod => `'${pod}'`).join(',')}]`;\n  return `\n    if ${podsToChangeRB}.include? target.pod_name\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '9.0'\n      end\n    end\n    # Build React Native with RCT_DEV enabled\n    next unless target.pod_name == 'React'\n    target.native_target.build_configurations.each do |config|\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_DEV=1'\n    end\n`;\n}\n\nfunction _renderTestTarget(reactNativePath) {\n  return `\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n  end\n`;\n}\n\nasync function _renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  let dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  let type = options.isPodfile ? 'pod' : 'ss.dependency';\n  let depsStrings = dependencies.map(\n    dependency => `  ${type} '${dependency.name}', '${dependency.version}'`\n  );\n  return depsStrings.join('\\n');\n}\n\nasync function renderExpoKitPodspecAsync(pathToTemplate, pathToOutput, moreSubstitutions) {\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n  let dependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(/\\$\\{IOS_EXPOKIT_DEPS\\}/g, indentString(dependencies, 2));\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(\n      /\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g,\n      moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION\n    );\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions,\n  sdkVersion = 'UNVERSIONED'\n) {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n\n  let reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  const expoKitPath = moreSubstitutions.EXPOKIT_PATH;\n  const expoKitTag = moreSubstitutions.EXPOKIT_TAG;\n  let expoKitDependencyOptions = {};\n  if (expoKitPath) {\n    expoKitDependencyOptions = { expoKitPath };\n  } else if (expoKitTag) {\n    expoKitDependencyOptions = { expoKitTag };\n  }\n\n  let versionedRnPath = moreSubstitutions.VERSIONED_REACT_NATIVE_PATH;\n  if (!versionedRnPath) {\n    versionedRnPath = './versioned-react-native';\n  }\n  let rnExpoSubspecs = moreSubstitutions.REACT_NATIVE_EXPO_SUBSPECS;\n  if (!rnExpoSubspecs) {\n    rnExpoSubspecs = ['Expo'];\n  }\n\n  let versionedDependencies = await _renderVersionedReactNativeDependenciesAsync(\n    templatesDirectory,\n    versionedRnPath,\n    rnExpoSubspecs\n  );\n  let versionedPostinstalls = await _renderVersionedReactNativePostinstallsAsync(\n    templatesDirectory\n  );\n  let podDependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    EXPOKIT_DEPENDENCY: _renderExpoKitDependency(expoKitDependencyOptions),\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: _renderUnversionedReactNativeDependency(\n      rnDependencyOptions,\n      sdkVersion\n    ),\n    PODFILE_UNVERSIONED_POSTINSTALL: _renderUnversionedPostinstall(),\n    PODFILE_DETACHED_POSTINSTALL: _renderDetachedPostinstall(sdkVersion),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_VERSIONED_POSTINSTALLS: versionedPostinstalls,\n    PODFILE_TEST_TARGET: _renderTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n  _validatePodfileSubstitutions(substitutions);\n\n  let result = templateString;\n  for (let key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      let replacement = substitutions[key];\n      result = result.replace(new RegExp(`\\\\\\$\\\\\\{${key}\\\\\\}`, 'g'), replacement);\n    }\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\nexport { renderExpoKitPodspecAsync, renderPodfileAsync };\n"],"sourceRoot":"/xdl/src"}