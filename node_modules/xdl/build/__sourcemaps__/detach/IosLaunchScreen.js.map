{"version":3,"sources":["detach/IosLaunchScreen.js"],"names":["async","context","let","tabletImagePathOrUrl","phoneImagePathOrUrl","type","exp","data","ios","splash","image","tabletImage","manifest","imageUrl","tabletImageUrl","outputs","push","pathOrUrl","filename","supportingDirectory","IosWorkspace","getPaths","projectRoot","projectPath","forEach","output","destinationPath","path","join","await","saveImageToPathAsync","_saveImageAssetsAsync","launchScreenPath","splashTemplateFilename","expoTemplatePath","expoSourcePath","spawnAsyncThrowError","stdio","_copyIntermediateLaunchScreenAsync","intermediatesDirectory","_maybeAbortForBackwardsCompatibility","console","log","mkdirp","sync","config","splashIntermediateFilename","manifestUsesSplashApi","transformFileContentsAsync","fileString","parser","serializer","dom","parseFromString","_setBackgroundColor","_setBackgroundImageResizeMode","serializeToString","splashOutputFilename","configureLaunchAssetsAsync","ASPECT_FILL","ASPECT_FIT","backgroundImageViewID","backgroundViewID","_backgroundColorFromHexString","hexColor","result","exec","length","warn","r","g","b","parseInt","backgroundColorString","backgroundColor","backgroundViewNode","getElementById","backgroundViewColorNodes","getElementsByTagName","backgroundColorNode","i","node","parentNode","getAttribute","setAttribute","backgroundViewMode","mode","resizeMode","backgroundImageViewNode","sdkVersion","parseSdkMajorVersion","_","process","env","EXPO_VIEW_DIR"],"mappings":"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","file":"../../detach/IosLaunchScreen.js","sourcesContent":["/**\n *  @flow\n */\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport { DOMParser, XMLSerializer } from 'xmldom';\n\nimport {\n  manifestUsesSplashApi,\n  parseSdkMajorVersion,\n  saveImageToPathAsync,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneContext from './StandaloneContext';\n\nconst ASPECT_FILL = 'scaleAspectFill';\nconst ASPECT_FIT = 'scaleAspectFit';\n\nconst backgroundImageViewID = 'Bsh-cT-K4l';\nconst backgroundViewID = 'OfY-5Y-tS4';\n\nfunction _backgroundColorFromHexString(hexColor) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (!result || result.length < 4) {\n    // Default to white if we can't parse the color. We should have 3 matches.\n    console.warn('Unable to parse color: ', hexColor, ' result:', result);\n    return { r: 1, g: 1, b: 1 };\n  }\n\n  const r = parseInt(result[1], 16) / 255;\n  const g = parseInt(result[2], 16) / 255;\n  const b = parseInt(result[3], 16) / 255;\n  return { r, g, b };\n}\n\nfunction _setBackgroundColor(manifest, dom) {\n  let backgroundColorString;\n  if (manifest.ios && manifest.ios.splash && manifest.ios.splash.backgroundColor) {\n    backgroundColorString = manifest.ios.splash.backgroundColor;\n  } else if (manifest.splash && manifest.splash.backgroundColor) {\n    backgroundColorString = manifest.splash.backgroundColor;\n  }\n\n  // Default to white\n  if (!backgroundColorString) {\n    backgroundColorString = '#FFFFFF';\n  }\n\n  const { r, g, b } = _backgroundColorFromHexString(backgroundColorString);\n  const backgroundViewNode = dom.getElementById(backgroundViewID);\n  const backgroundViewColorNodes = backgroundViewNode.getElementsByTagName('color');\n  let backgroundColorNode;\n  for (let i = 0; i < backgroundViewColorNodes.length; i++) {\n    const node = backgroundViewColorNodes[i];\n    if (node.parentNode.getAttribute('id') !== backgroundViewID) {\n      continue;\n    }\n\n    if (node.getAttribute('key') === 'backgroundColor') {\n      backgroundColorNode = node;\n      break;\n    }\n  }\n\n  if (backgroundColorNode) {\n    backgroundColorNode.setAttribute('red', r);\n    backgroundColorNode.setAttribute('green', g);\n    backgroundColorNode.setAttribute('blue', b);\n  }\n}\n\nasync function _saveImageAssetsAsync(context: StandaloneContext) {\n  let tabletImagePathOrUrl, phoneImagePathOrUrl;\n\n  if (context.type === 'user') {\n    // copy images from local project\n    const exp = context.data.exp;\n    if (exp.ios && exp.ios.splash && exp.ios.splash.image) {\n      phoneImagePathOrUrl = exp.ios.splash.image;\n\n      if (exp.ios.splash.tabletImage) {\n        tabletImagePathOrUrl = exp.ios.splash.tabletImage;\n      }\n    } else if (exp.splash && exp.splash.image) {\n      phoneImagePathOrUrl = exp.splash.image;\n    }\n  } else {\n    // use uploaded assets from published project\n    const manifest = context.data.manifest;\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.imageUrl) {\n      phoneImagePathOrUrl = manifest.ios.splash.imageUrl;\n\n      if (manifest.ios.splash.tabletImageUrl) {\n        tabletImagePathOrUrl = manifest.ios.splash.tabletImageUrl;\n      }\n    } else if (manifest.splash && manifest.splash.imageUrl) {\n      phoneImagePathOrUrl = manifest.splash.imageUrl;\n    }\n  }\n\n  if (!phoneImagePathOrUrl) {\n    return;\n  }\n\n  const outputs = [];\n  if (!tabletImagePathOrUrl) {\n    outputs.push({\n      pathOrUrl: phoneImagePathOrUrl,\n      filename: 'launch_background_image.png',\n    });\n  } else {\n    outputs.push({\n      pathOrUrl: phoneImagePathOrUrl,\n      filename: 'launch_background_image~iphone.png',\n    });\n    outputs.push({\n      pathOrUrl: tabletImagePathOrUrl,\n      filename: 'launch_background_image.png',\n    });\n  }\n\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const projectRoot = context.type === 'user' ? context.data.projectPath : supportingDirectory;\n  outputs.forEach(async output => {\n    const { pathOrUrl, filename } = output;\n    const destinationPath = path.join(supportingDirectory, filename);\n    await saveImageToPathAsync(projectRoot, pathOrUrl, destinationPath);\n  });\n}\n\nfunction _setBackgroundImageResizeMode(manifest, dom) {\n  let backgroundViewMode = (() => {\n    let mode;\n    if (!manifest) {\n      return ASPECT_FIT;\n    }\n\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.resizeMode) {\n      mode = manifest.ios.splash.resizeMode;\n    } else if (manifest.splash && manifest.splash.resizeMode) {\n      mode = manifest.splash.resizeMode;\n    }\n\n    return mode === 'cover' ? ASPECT_FILL : ASPECT_FIT;\n  })();\n\n  const backgroundImageViewNode = dom.getElementById(backgroundImageViewID);\n  if (backgroundImageViewNode) {\n    backgroundImageViewNode.setAttribute('contentMode', backgroundViewMode);\n  }\n}\n\nasync function _copyIntermediateLaunchScreenAsync(\n  context: StandaloneContext,\n  launchScreenPath: string\n) {\n  let splashTemplateFilename;\n  if (context.type === 'user') {\n    const { supportingDirectory } = IosWorkspace.getPaths(context);\n    splashTemplateFilename = path.join(supportingDirectory, 'LaunchScreen.xib');\n  } else {\n    // TODO: after shell apps use detached workspaces,\n    // we can just do this with the workspace's copy instead of referencing expoSourcePath.\n    const expoTemplatePath = path.join(\n      context.data.expoSourcePath,\n      '..',\n      'exponent-view-template',\n      'ios'\n    );\n    splashTemplateFilename = path.join(\n      expoTemplatePath,\n      'exponent-view-template',\n      'Supporting',\n      'LaunchScreen.xib'\n    );\n  }\n  await spawnAsyncThrowError('/bin/cp', [splashTemplateFilename, launchScreenPath], {\n    stdio: 'inherit',\n  });\n  return;\n}\n\nfunction _maybeAbortForBackwardsCompatibility(context: StandaloneContext) {\n  // before SDK 23, the ExpoKit template project didn't have the code or supporting files\n  // to have a configurable splash screen. so don't try to move nonexistent files around\n  // or edit them.\n  let sdkVersion;\n  try {\n    sdkVersion = parseSdkMajorVersion(context.config.sdkVersion);\n  } catch (_) {\n    sdkVersion = 0; // :thinking_face:\n  }\n  if (sdkVersion < 23 && context.type === 'user' && !process.env.EXPO_VIEW_DIR) {\n    return true;\n  }\n  return false;\n}\n\nasync function configureLaunchAssetsAsync(\n  context: StandaloneContext,\n  intermediatesDirectory: string\n) {\n  if (_maybeAbortForBackwardsCompatibility(context)) {\n    return;\n  }\n  console.log('Configuring iOS Launch Screen...');\n\n  mkdirp.sync(intermediatesDirectory);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const config = context.config;\n\n  const splashIntermediateFilename = path.join(intermediatesDirectory, 'LaunchScreen.xib');\n  await _copyIntermediateLaunchScreenAsync(context, splashIntermediateFilename);\n\n  if (manifestUsesSplashApi(config, 'ios')) {\n    await transformFileContentsAsync(splashIntermediateFilename, fileString => {\n      const parser = new DOMParser();\n      const serializer = new XMLSerializer();\n      const dom = parser.parseFromString(fileString);\n\n      _setBackgroundColor(config, dom);\n      _setBackgroundImageResizeMode(config, dom);\n\n      return serializer.serializeToString(dom);\n    });\n\n    await _saveImageAssetsAsync(context);\n  }\n\n  if (context.type === 'user') {\n    await spawnAsyncThrowError(\n      '/bin/cp',\n      [splashIntermediateFilename, path.join(supportingDirectory, 'LaunchScreen.xib')],\n      {\n        stdio: 'inherit',\n      }\n    );\n  } else {\n    const splashOutputFilename = path.join(supportingDirectory, 'Base.lproj', 'LaunchScreen.nib');\n    await spawnAsyncThrowError('ibtool', [\n      '--compile',\n      splashOutputFilename,\n      splashIntermediateFilename,\n    ]);\n  }\n  return;\n}\n\nexport { configureLaunchAssetsAsync };\n"],"sourceRoot":"/xdl/src"}