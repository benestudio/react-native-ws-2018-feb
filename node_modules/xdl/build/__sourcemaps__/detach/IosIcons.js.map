{"version":3,"sources":["detach/IosIcons.js"],"names":["async","context","path","type","data","exp","icon","await","saveImageToPathAsync","projectPath","Error","manifest","ios","iconUrl","saveUrlToPathAsync","_saveDefaultIconToPathAsync","destinationIconPath","process","platform","_resizeImageAsync","_resizeImageWithSipsAsync","console","warn","let","defaultIconFilename","join","e","message","iconSizes","Promise","all","map","iconSize","iconResolutions","iconResolution","iconQualifier","_getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","spawnAsyncThrowError","stdio","cwd","dims","getImageDimensionsMacOSAsync","length","createAndWriteIconsToPathAsync","dirname","basename","dimensions","_getImageDimensionsAsync","_","childProcess","components","stdout","split","c","parseInt","filter","n","isNaN","_getImageDimensionsWithSipsAsync","setResizeImageFunction","fn","setGetImageDimensionsFunction"],"mappings":"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","file":"../../detach/IosIcons.js","sourcesContent":["/**\n *  @flow\n */\nimport path from 'path';\n\nimport { saveImageToPathAsync, saveUrlToPathAsync, spawnAsyncThrowError } from './ExponentTools';\nimport StandaloneContext from './StandaloneContext';\n\nfunction _getAppleIconQualifier(iconSize: number, iconResolution: number): string {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\nasync function _saveDefaultIconToPathAsync(context: StandaloneContext, path: string) {\n  if (context.type === 'user') {\n    if (context.data.exp.icon) {\n      await saveImageToPathAsync(context.data.projectPath, context.data.exp.icon, path);\n    } else {\n      throw new Error('Cannot save icon because app.json has no exp.icon key.');\n    }\n  } else {\n    if (context.data.manifest.ios && context.data.manifest.ios.iconUrl) {\n      await saveUrlToPathAsync(context.data.manifest.ios.iconUrl, path);\n    } else if (context.data.manifest.iconUrl) {\n      await saveUrlToPathAsync(context.data.manifest.iconUrl, path);\n    } else {\n      throw new Error('Cannot save icon because manifest has no iconUrl or ios.iconUrl key.');\n    }\n  }\n  return;\n}\n\n/**\n * Based on keys in the given context.config,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function createAndWriteIconsToPathAsync(\n  context: StandaloneContext,\n  destinationIconPath: string\n) {\n  if (process.platform !== 'darwin' && _resizeImageAsync === _resizeImageWithSipsAsync) {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let defaultIconFilename = 'exp-icon.png';\n  try {\n    await _saveDefaultIconToPathAsync(context, path.join(destinationIconPath, defaultIconFilename));\n  } catch (e) {\n    defaultIconFilename = null;\n    console.warn(e.message);\n  }\n\n  const iconSizes = [1024, 20, 29, 40, 60, 76, 83.5];\n\n  await Promise.all(\n    iconSizes.map(async iconSize => {\n      let iconResolutions;\n      if (iconSize === 76) {\n        // iPad has 1x and 2x icons for this size only\n        iconResolutions = [1, 2];\n      } else if (iconSize == 1024) {\n        // marketing icon is weird\n        iconResolutions = [1];\n      } else if (iconSize === 83.5) {\n        iconResolutions = [2];\n      } else {\n        iconResolutions = [2, 3];\n      }\n\n      // We need to wait for all of these to finish!\n      await Promise.all(\n        iconResolutions.map(async iconResolution => {\n          let iconQualifier = _getAppleIconQualifier(iconSize, iconResolution);\n          let iconKey = `iconUrl${iconQualifier}`;\n          let rawIconFilename;\n          let usesDefault = false;\n          if (context.type === 'service') {\n            // TODO(nikki): Support local paths for these icons\n            const manifest = context.data.manifest;\n            if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n              // manifest specifies an image just for this size/resolution, use that\n              rawIconFilename = `exp-icon${iconQualifier}.png`;\n              await saveUrlToPathAsync(\n                manifest.ios[iconKey],\n                `${destinationIconPath}/${rawIconFilename}`\n              );\n            }\n          }\n          if (!rawIconFilename) {\n            // use default iconUrl\n            usesDefault = true;\n            if (defaultIconFilename) {\n              rawIconFilename = defaultIconFilename;\n            } else {\n              console.warn(\n                `Project does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n              );\n              return;\n            }\n          }\n\n          let iconFilename = `AppIcon${iconQualifier}.png`;\n          let iconSizePx = iconSize * iconResolution;\n          await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n            stdio: 'inherit',\n            cwd: destinationIconPath,\n          });\n          try {\n            await _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n          } catch (e) {\n            throw new Error(`Failed to resize image: ${iconFilename}. (${e})`);\n          }\n\n          // reject non-square icons (because Apple will if we don't)\n          const dims = await getImageDimensionsMacOSAsync(destinationIconPath, iconFilename);\n          if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n            if (!dims) {\n              throw new Error(`Unable to read the dimensions of ${iconFilename}`);\n            } else {\n              throw new Error(\n                `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n              );\n            }\n          }\n\n          if (!usesDefault) {\n            // non-default icon used, clean up the downloaded version\n            await spawnAsyncThrowError('/bin/rm', [\n              path.join(destinationIconPath, rawIconFilename),\n            ]);\n          }\n        })\n      );\n    })\n  );\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [path.join(destinationIconPath, defaultIconFilename)]);\n  }\n\n  return;\n}\n\n/**\n *  @return array [ width, height ] or null if that fails for some reason.\n */\nasync function getImageDimensionsMacOSAsync(\n  dirname: string,\n  basename: string\n): Promise<?(number[])> {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let dimensions = null;\n  try {\n    dimensions = await _getImageDimensionsAsync(basename, dirname);\n  } catch (_) {}\n  return dimensions;\n}\n\nasync function _resizeImageWithSipsAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  return spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: destinationIconPath,\n  });\n}\n\nasync function _getImageDimensionsWithSipsAsync(\n  basename: string,\n  dirname: string\n): Promise<number[]> {\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n  const components = childProcess.stdout.split(/(\\s+)/);\n  return components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n}\n\n// Allow us to swap out the default implementations of image functions\nlet _resizeImageAsync = _resizeImageWithSipsAsync;\nlet _getImageDimensionsAsync = _getImageDimensionsWithSipsAsync;\n\n// Allow users to provide an alternate implementation for our image resize function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setResizeImageFunction(\n  fn: (iconSizePx: number, iconFilename: string, destinationIconPath: string) => Promise<any>\n) {\n  _resizeImageAsync = fn;\n}\n\n// Allow users to provide an alternate implementation for our image dimensions function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setGetImageDimensionsFunction(\n  fn: (basename: string, dirname: string) => Promise<?(number[])>\n) {\n  _getImageDimensionsAsync = fn;\n}\n\nexport {\n  createAndWriteIconsToPathAsync,\n  getImageDimensionsMacOSAsync,\n  setResizeImageFunction,\n  setGetImageDimensionsFunction,\n};\n"],"sourceRoot":"/xdl/src"}