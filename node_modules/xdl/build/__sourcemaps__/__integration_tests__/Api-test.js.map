{"version":3,"sources":["__integration_tests__/Api-test.js"],"names":["jasmine","DEFAULT_TIMEOUT_INTERVAL","XDL_TEST_CLIENT_ID","_makeShortId","salt","minLength","hashIds","encode","Date","now","statAsync","promisify","fs","stat","describe","let","userForTest","projectRoot","beforeAll","async","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","await","registerAsync","email","givenName","familyName","afterAll","stopAsync","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","logoutAsync","it","clearXDLCacheAsync","dir","UserSettings","getAsync","os","homedir","starterAppPath","downloadTemplateApp","name","valueOf","progressFunction","retryFunction","expect","toEqual","any","String","stats","isFile","initialize"],"mappings":"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","file":"../../__integration_tests__/Api-test.js","sourcesContent":["/**\n * @flow\n */\njasmine.DEFAULT_TIMEOUT_INTERVAL = 300000;\nimport fs from 'fs-extra';\nimport path from 'path';\nimport HashIds from 'hashids';\nimport uuid from 'uuid';\nimport os from 'os';\nimport promisify from 'util.promisify';\nimport ApiV2Client from '../ApiV2';\nimport { stopAsync } from '../Project';\nimport { UserManagerInstance } from '../User';\nimport UserSettings from '../UserSettings';\nimport { clearXDLCacheAsync, downloadTemplateApp } from '../Exp';\n\nconst XDL_TEST_CLIENT_ID = 'o0YygTgKhOTdoWj10Yl9nY2P0SMTw38Y';\n\nconst _makeShortId = (salt: string, minLength: number = 10): string => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\nconst statAsync = promisify(fs.stat);\n\ndescribe('api', () => {\n  let userForTest;\n  let projectRoot;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n  });\n\n  afterAll(async () => {\n    if (projectRoot) {\n      await stopAsync(projectRoot);\n    }\n    const UserManager = _newTestUserManager();\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n    //fs.removeSync(projectRoot);\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n    await UserManager.logoutAsync();\n  });\n\n  it('should download the starter app template', async () => {\n    await clearXDLCacheAsync();\n    // Get the default directory to then download the template\n    let dir = await UserSettings.getAsync('defaultNewProjectDir', os.homedir());\n    let { starterAppPath } = await downloadTemplateApp('tabs', dir, {\n      name: `test-template-${new Date().valueOf()}`,\n      progressFunction: () => {},\n      retryFunction: () => {},\n    });\n    // $FlowFixMe: missing definition for expect.any\n    expect(starterAppPath).toEqual(expect.any(String));\n    let stats = await statAsync(starterAppPath);\n    expect(stats.isFile());\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize(XDL_TEST_CLIENT_ID); // XDL Test Client\n  return UserManager;\n}\n"],"sourceRoot":"/xdl/src"}