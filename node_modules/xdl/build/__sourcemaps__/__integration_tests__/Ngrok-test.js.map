{"version":3,"sources":["__integration_tests__/Ngrok-test.js"],"names":["jest","useRealTimers","jasmine","DEFAULT_TIMEOUT_INTERVAL","request","require","defaults","resolveWithFullResponse","path","xdl","describe","xit","async","let","projectRoot","resolve","__dirname","await","Project","startAsync","ngrokUrl","getUrlAsync","urlType","hostType","Error","response","get","body","responseValue","JSON","parse","error","statusCode","console","log","bundleUrl","bundleResponse","includes","stopAsync"],"mappings":"AAAA;;;;AAIA;;;;AAEAA,KAAKC,aAALD;AACAE,QAAQC,wBAARD,GAAmC,KAAnCA;;AAEA,MAAME,UAAUC,QAAQ,wBAARA,EAAkCC,QAAlCD,CAA2C;AACzDE,2BAAyB;AADgC,CAA3CF,CAAhB;AAGA,MAAMG,OAAOH,QAAQ,MAARA,CAAb;;AAEA,MAAMI,MAAMJ,QAAQ,QAARA,CAAZ;;AAEAK,SAAS,OAATA,EAAkB,MAAM;AACtBC,MAAI,oCAAJA,oBAA0CC,aAAY;AACpDC,QAAIC,cAAcN,KAAKO,OAALP,CAAaQ,SAAbR,EAAwB,uCAAxBA,CAAlBK;AACAI,UAAMR,IAAIS,OAAJT,CAAYU,UAAZV,CAAuBK,WAAvBL,CAANQ;AACAJ,QAAIO,WAAWH,MAAMR,IAAIS,OAAJT,CAAYY,WAAZZ,CAAwBK,WAAxBL,EAAqC;AACxDa,eAAS,MAD+C;AAExDC,gBAAU;AAF8C,KAArCd,CAArBI;AAIA,QAAI,CAACO,QAAL,EAAe;AACb,YAAM,IAAII,KAAJ,CAAU,2BAAV,CAAN;AACF;AACAX,QAAIY,WAAWR,MAAMb,QAAQsB,GAARtB,CAAYgB,QAAZhB,CAArBS;AACA,QAAI,CAACY,SAASE,IAAd,EAAoB;AAClB,YAAM,IAAIH,KAAJ,CAAU,uCAAV,CAAN;AACF;AACAX,QAAIe,gBAAgBC,KAAKC,KAALD,CAAWJ,SAASE,IAApBE,CAApBhB;AACA,QAAIe,cAAcG,KAAdH,IAAuBH,SAASO,UAATP,KAAwB,GAAnD,EAAwD;AACtD,YAAM,IAAID,KAAJ,CAAU,qCAAqCI,cAAcG,KAA7D,CAAN;AACF;;AAEAE,YAAQC,GAARD,CAAY,qEAAZA;;AAEApB,QAAIsB,YAAYP,cAAcO,SAA9BtB;AACAoB,YAAQC,GAARD,CAAa,sBAAqBE,SAAU,EAA5CF;AACApB,QAAIuB,iBAAiBnB,MAAMb,QAAQsB,GAARtB,CAAY+B,SAAZ/B,CAA3BS;AACA,QAAI,CAACuB,eAAeT,IAAhB,IAAwB,CAACS,eAAeT,IAAfS,CAAoBC,QAApBD,CAA6B,kBAA7BA,CAA7B,EAA+E;AAC7E,YAAM,IAAIZ,KAAJ,CAAU,qCAAV,CAAN;AACF;;AAEA,QAAIY,eAAeJ,UAAfI,KAA8B,GAAlC,EAAuC;AACrC,YAAM,IAAIZ,KAAJ,CAAU,8CAA8CY,eAAeJ,UAAvE,CAAN;AACF;;AAEAf,UAAMR,IAAIS,OAAJT,CAAY6B,SAAZ7B,CAAsBK,WAAtBL,CAANQ;AACD,GAjCDN;AAkCD,CAnCDD","file":"../../__integration_tests__/Ngrok-test.js","sourcesContent":["/**\n * Tests setting up an ngrok tunnel\n *\n */\n'use strict';\n\njest.useRealTimers();\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n\nconst request = require('request-promise-native').defaults({\n  resolveWithFullResponse: true,\n});\nconst path = require('path');\n\nconst xdl = require('../xdl');\n\ndescribe('ngrok', () => {\n  xit('starts running and serves manifest', async () => {\n    let projectRoot = path.resolve(__dirname, '../../../../apps/new-project-template');\n    await xdl.Project.startAsync(projectRoot);\n    let ngrokUrl = await xdl.Project.getUrlAsync(projectRoot, {\n      urlType: 'http',\n      hostType: 'tunnel',\n    });\n    if (!ngrokUrl) {\n      throw new Error(\"ngrok didn't return a URL\");\n    }\n    let response = await request.get(ngrokUrl);\n    if (!response.body) {\n      throw new Error(\"Didn't get expected manifest response\");\n    }\n    let responseValue = JSON.parse(response.body);\n    if (responseValue.error || response.statusCode !== 200) {\n      throw new Error('Server responded with an error: ' + responseValue.error);\n    }\n\n    console.log('Successfully fetched manifest through ngrok and everything seems OK');\n\n    let bundleUrl = responseValue.bundleUrl;\n    console.log(`Fetching bundle at ${bundleUrl}`);\n    let bundleResponse = await request.get(bundleUrl);\n    if (!bundleResponse.body || !bundleResponse.body.includes('sourceMappingURL')) {\n      throw new Error(\"Didn't get expected bundle response\");\n    }\n\n    if (bundleResponse.statusCode !== 200) {\n      throw new Error('Packager responded with bad status code: ' + bundleResponse.statusCode);\n    }\n\n    await xdl.Project.stopAsync(projectRoot);\n  });\n});\n"],"sourceRoot":"/xdl/src"}