{"version":3,"sources":["logs/PackagerLogsStream.js"],"names":["PackagerLogsStream","constructor","projectRoot","getCurrentOpenProjectId","updateLogs","onStartBuildBundle","onProgressBuildBundle","onFinishBuildBundle","_resetState","_logsToAdd","_chunkID","_handlePackagerEvent","chunk","let","msg","type","match","_handleBundleTransformEvent","port","_enqueueAppendLogChunk","_handleNewBundleTransformStarted","_bundleBuildChunkID","_handleUpdateBundleTransformProgress","_id","_bundleBuildStart","Date","_onStartBuildBundle","progressChunk","percentProgress","bundleComplete","bundleError","bundleBuildEnd","Error","Math","floor","transformedFileCount","totalFileCount","_onProgressBuildBundle","_onFinishBuildBundle","_updateLogs","logs","length","forEach","log","error","description","message","duration","_enqueueFlushLogsToAdd","func","nextLogs","concat","isNode","setImmediate","_legacyFormatter","progress","_cleanUpNodeErrors","replace","_projectRoot","_getCurrentOpenProjectId","_attachLoggerStream","projectId","ProjectUtils","attachLoggerStream","stream","write","tag","_maybeParseMsgJSON","_formatMsg","_attachChunkID","shouldHide","push","parsedMsg","JSON","parse","e","trim"],"mappings":"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","file":"../../logs/PackagerLogsStream.js","sourcesContent":["/* @flow */\n\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport { trim } from 'lodash';\nimport { isNode } from '../tools/EnvironmentHelper';\n\ntype ChunkT = {\n  _id: ?number,\n  shouldHide: boolean,\n  msg: any,\n  tag: 'packager' | 'expo' | 'device',\n};\n\ntype LogUpdater = (logState: Array<ChunkT>) => Array<ChunkT>;\n\nexport default class PackagerLogsStream {\n  _projectRoot: string;\n  _getCurrentOpenProjectId: () => any;\n  _updateLogs: (updater: LogUpdater) => void;\n  _logsToAdd: Array<ChunkT>;\n  _chunkID: number;\n  _bundleBuildChunkID: ?number;\n  _onStartBuildBundle: ?Function;\n  _onProgressBuildBundle: ?Function;\n  _onFinishBuildBundle: ?Function;\n  _onFailBuildBundle: ?Function;\n  _bundleBuildStart: ?Date;\n\n  _resetState = () => {\n    this._logsToAdd = [];\n    this._chunkID = 0;\n  };\n\n  constructor({\n    projectRoot,\n    getCurrentOpenProjectId,\n    updateLogs,\n    onStartBuildBundle,\n    onProgressBuildBundle,\n    onFinishBuildBundle,\n  }: {\n    projectRoot: string,\n    getCurrentOpenProjectId?: () => any,\n    updateLogs: (updater: LogUpdater) => void,\n    onStartBuildBundle?: () => void,\n    onProgressBuildBundle?: (progress: number) => void,\n    onFinishBuildBundle?: () => void,\n  }) {\n    this._resetState();\n    this._projectRoot = projectRoot;\n    this._getCurrentOpenProjectId = getCurrentOpenProjectId || (() => 1);\n    this._updateLogs = updateLogs;\n\n    // Optional properties in case the consumer wants to handle updates on\n    // its own, eg: for a progress bar\n    this._onStartBuildBundle = onStartBuildBundle;\n    this._onProgressBuildBundle = onProgressBuildBundle;\n    this._onFinishBuildBundle = onFinishBuildBundle;\n\n    this._attachLoggerStream();\n  }\n\n  _attachLoggerStream() {\n    let projectId = this._getCurrentOpenProjectId();\n\n    ProjectUtils.attachLoggerStream(this._projectRoot, {\n      stream: {\n        write: (chunk: any) => {\n          if (chunk.tag !== 'packager' && chunk.tag !== 'expo') {\n            return;\n          } else if (this._getCurrentOpenProjectId() !== projectId) {\n            // TODO: We should be confident that we are properly unsubscribing\n            // from the stream rather than doing a defensive check like this.\n            return;\n          }\n\n          chunk = this._maybeParseMsgJSON(chunk);\n          chunk = this._formatMsg(chunk);\n          chunk = this._cleanUpNodeErrors(chunk);\n          chunk = this._attachChunkID(chunk);\n\n          if (typeof chunk.msg === 'object' || chunk.type === 'packager') {\n            this._handlePackagerEvent(chunk);\n          } else if (!chunk.msg.match(/\\w/) || !chunk.msg || chunk.msg[0] === '{') {\n            return;\n          } else {\n            this._enqueueAppendLogChunk(chunk);\n          }\n        },\n      },\n      type: 'raw',\n    });\n  }\n\n  // This is where we handle any special packager events\n  _handlePackagerEvent = (chunk: any) => {\n    let { msg } = chunk;\n\n    if (!msg.type) {\n      return;\n    } else if (msg.type && msg.type.match(/^bundle_/)) {\n      this._handleBundleTransformEvent(chunk);\n      return;\n    }\n\n    if (msg.type === 'dep_graph_loading') {\n      chunk.msg = 'Loading dependency graph.'; // doesn't seem important to log this\n    } else if (msg.type == 'dep_graph_loaded') {\n      chunk.msg = 'Dependency graph loaded.'; // doesn't seem important to log this\n    } else if (msg.type === 'transform_cache_reset') {\n      chunk.msg = 'Your JavaScript transform cache is empty, rebuilding (this may take a minute).';\n    } else if (msg.type === 'initialize_packager_started') {\n      chunk.msg = `Running packager on port ${msg.port}.`;\n    } else {\n      chunk.msg = '';\n    }\n\n    this._enqueueAppendLogChunk(chunk);\n  };\n\n  // Any event related to bundle building is handled here\n  _handleBundleTransformEvent = (chunk: any) => {\n    let { msg } = chunk;\n\n    if (msg.type === 'bundle_build_started') {\n      this._handleNewBundleTransformStarted(chunk);\n    } else if (msg.type === 'bundle_transform_progressed') {\n      this._bundleBuildChunkID\n        ? this._handleUpdateBundleTransformProgress(chunk)\n        : this._handleNewBundleTransformStarted(chunk);\n    } else if (msg.type === 'bundle_build_failed') {\n      if (!this._bundleBuildChunkID) {\n        return; // maybe?\n      } else {\n        this._handleUpdateBundleTransformProgress(chunk);\n      }\n    } else if (msg.type === 'bundle_build_done') {\n      if (!this._bundleBuildChunkID) {\n        return; // maybe?\n      } else {\n        this._handleUpdateBundleTransformProgress(chunk);\n      }\n    } else {\n      // Unrecognized bundle_* message!\n    }\n  };\n\n  _handleNewBundleTransformStarted = (chunk: any) => {\n    if (this._bundleBuildChunkID) {\n      return;\n    }\n\n    this._bundleBuildChunkID = chunk._id;\n    this._bundleBuildStart = new Date();\n    chunk.msg = 'Building JavaScript bundle';\n\n    if (this._onStartBuildBundle) {\n      this._onStartBuildBundle();\n    } else {\n      this._enqueueAppendLogChunk(chunk);\n    }\n  };\n\n  _handleUpdateBundleTransformProgress = (progressChunk: any) => {\n    let { msg } = progressChunk;\n    let percentProgress;\n    let bundleComplete = false;\n    let bundleError = false;\n    let bundleBuildEnd;\n\n    if (msg.type === 'bundle_build_done') {\n      percentProgress = 100;\n      bundleComplete = true;\n      bundleBuildEnd = new Date();\n    } else if (msg.type === 'bundle_build_failed') {\n      percentProgress = -1;\n      bundleComplete = true;\n      bundleError = new Error('Failed to build bundle');\n      bundleBuildEnd = new Date();\n    } else {\n      percentProgress = Math.floor(msg.transformedFileCount / msg.totalFileCount * 100);\n    }\n\n    if (this._onProgressBuildBundle) {\n      this._onProgressBuildBundle(percentProgress);\n\n      if (bundleComplete) {\n        this._onFinishBuildBundle &&\n          this._onFinishBuildBundle(bundleError, this._bundleBuildStart, bundleBuildEnd);\n        this._bundleBuildStart = null;\n        this._bundleBuildChunkID = null;\n      }\n    } else {\n      this._updateLogs(logs => {\n        if (!logs || !logs.length) {\n          return [];\n        }\n\n        logs.forEach(log => {\n          if (log._id === this._bundleBuildChunkID) {\n            if (percentProgress === -1) {\n              log.msg = `Building JavaScript bundle: error\\n${msg.error.description ||\n                msg.error.message}`;\n            } else {\n              if (bundleComplete) {\n                let duration;\n                if (this._bundleBuildStart) {\n                  duration = bundleBuildEnd - this._bundleBuildStart;\n                }\n\n                if (duration) {\n                  log.msg = `Building JavaScript bundle: finished in ${duration}ms.`;\n                } else {\n                  log.msg = `Building JavaScript bundle: finished.`;\n                }\n              } else {\n                log.msg = `Building JavaScript bundle: ${percentProgress}%`;\n              }\n            }\n          }\n        });\n\n        if (bundleComplete) {\n          this._bundleBuildChunkID = null;\n        }\n\n        return [...logs];\n      });\n    }\n  };\n\n  _enqueueAppendLogChunk(chunk: ChunkT) {\n    if (chunk.shouldHide) {\n      return;\n    } else {\n      this._logsToAdd.push(chunk);\n      this._enqueueFlushLogsToAdd();\n    }\n  }\n\n  _enqueueFlushLogsToAdd = () => {\n    let func = () => {\n      this._updateLogs(logs => {\n        if (this._logsToAdd.length === 0) {\n          return logs;\n        }\n\n        let nextLogs = logs.concat(this._logsToAdd);\n        this._logsToAdd = [];\n        return nextLogs;\n      });\n    };\n\n    if (isNode()) {\n      func();\n    } else {\n      setImmediate(func);\n    }\n  };\n\n  _attachChunkID(chunk: any) {\n    this._chunkID++;\n    chunk._id = this._chunkID;\n    return chunk;\n  }\n\n  _maybeParseMsgJSON(chunk: any) {\n    try {\n      let parsedMsg = JSON.parse(chunk.msg);\n      chunk.msg = parsedMsg;\n    } catch (e) {\n      // Fallback to the <= SDK 15 version of formatting logs\n      let msg = this._legacyFormatter(chunk);\n      chunk.msg = msg;\n    }\n\n    return chunk;\n  }\n\n  _legacyFormatter = (chunk: ChunkT) => {\n    if (typeof chunk.msg === 'object') {\n      return chunk;\n    }\n\n    if (chunk.msg.match(/Transforming modules/)) {\n      let progress = chunk.msg.match(/\\d+\\.\\d+% \\(\\d+\\/\\d+\\)/);\n      if (progress && progress[0]) {\n        chunk.msg = `Transforming modules: ${progress[0]}`;\n      }\n    }\n\n    return chunk.msg;\n  };\n\n  _cleanUpNodeErrors = (chunk: ChunkT) => {\n    if (typeof chunk.msg === 'object') {\n      return chunk;\n    }\n\n    if (chunk.msg.match(/\\(node:.\\d*\\)/)) {\n      // Example: (node:13817) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): SyntaxError: SyntaxError /Users/brent/universe/apps/new-project-template/main.js: Unexpected token (10:6)\n      // The first part of this is totally useless, so let's remove it.\n      if (chunk.msg.match(/UnhandledPromiseRejectionWarning/)) {\n        chunk.msg = chunk.msg.replace(/\\(node:.*\\(rejection .*\\):/, '');\n        if (chunk.msg.match(/SyntaxError: SyntaxError/)) {\n          chunk.msg = chunk.msg.replace('SyntaxError: ', '');\n        }\n      } else if (chunk.msg.match(/DeprecationWarning/)) {\n        chunk.msg = '';\n      }\n    }\n\n    return chunk;\n  };\n\n  // This message is just noise\n  // Fall back to the same formatting we did on SDK <= 15 before we had a custom\n  // reporter class.\n  _formatMsg(chunk: any) {\n    if (typeof chunk.msg === 'object') {\n      return chunk;\n    }\n\n    if (chunk.msg.match(/Looking for JS files in/)) {\n      chunk.msg = '';\n    } else if (chunk.msg.match(/^[\\u001b]/)) {\n      chunk.msg = '';\n    }\n\n    chunk.msg = chunk.msg.replace(/\\[\\w{2}m/g, '');\n    chunk.msg = chunk.msg.replace(/\\[2K/g, '');\n    chunk.msg = trim(chunk.msg);\n    return chunk;\n  }\n}\n"],"sourceRoot":"/xdl/src"}