{"version":3,"sources":["XDLError.js"],"names":["ERROR_PREFIX","XDLError","constructor","code","message","options","noTrack","startsWith","substring","length","isXDLError","Intercom","trackEvent"],"mappings":";;;;;;;;AAIA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;;;;;;AAEA,MAAMA,eAAe,SAArB;;AAEe,MAAMC,QAAN,iDAAuC;;AAIpDC,cACEC,IADFD,EAEEE,OAFFF,EAGEG,UAAgC,EAAEC,SAAS,KAAX,EAHlCJ,EAIE;AACA;AACA;AACA,QAAIE,QAAQG,UAARH,CAAmBJ,YAAnBI,CAAJ,EAAsC;AACpCA,gBAAUA,QAAQI,SAARJ,CAAkBJ,aAAaS,MAA/BL,CAAVA;AACF;;AAEA,UAAMA,OAAN;;AAEA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKO,UAAL,GAAkB,IAAlB;;AAEA,QAAIL,WAAW,CAACA,QAAQC,OAAxB,EAAiC;AAC/B;AACA;AACA;AACA;AACA;;AAEAK,sCAASC,UAATD,CAAoB,OAApBA,EAA6B;AAC3BR,YAD2B;AAE3BC;AAF2B,OAA7BO;AAIF;AACF;AAhCoD;kBAAjCV,Q","file":"../XDLError.js","sourcesContent":["/**\n * @flow\n */\n\nimport ExtendableError from 'es6-error';\n\nimport * as Analytics from './Analytics';\nimport * as Intercom from './Intercom';\n\nimport type { ErrorCodes } from './ErrorCode';\nimport * as Sentry from './Sentry';\n\nconst ERROR_PREFIX = 'Error: ';\n\nexport default class XDLError extends ExtendableError {\n  code: string;\n  isXDLError: boolean;\n\n  constructor(\n    code: $Keys<ErrorCodes>,\n    message: string,\n    options: { noTrack: boolean } = { noTrack: false }\n  ) {\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    super(message);\n\n    this.code = code;\n    this.isXDLError = true;\n\n    if (options && !options.noTrack) {\n      // temporarily remove sentry until we can trim events\n      // send error to Sentry\n      // Sentry.logError(message, {\n      //   tags: { code, type: 'XDL Error' },\n      // });\n\n      Intercom.trackEvent('error', {\n        code,\n        message,\n      });\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}