{"version":3,"sources":["state/reducers/notifications.js"],"names":["INITIAL_PROJECT_STATE","count","color","info","warn","error","GLOBAL","actions","add","projectRoot","id","message","tag","logLevel","type","clear","addGlobal","clearGlobal","reducer","state","action","_addNotification","_clearNotification","let","projectObject","JSON","parse","stringify","arrayOfIssues","index","_","findIndex","push","newState","_setCount","newProjectObject","forEach","array","key","Array","isArray","remove","notification","console","log","length"],"mappings":"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","file":"../../../state/reducers/notifications.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\n\nconst INITIAL_PROJECT_STATE = {\n  count: 0,\n  color: '#595C68',\n  info: [],\n  warn: [],\n  error: [],\n};\n\nconst GLOBAL = 'global';\n\nexport const actions = {\n  // logLevel = 'warning', 'error', or 'info'\n  add: (projectRoot: string, id: string, message: string, tag: string, logLevel: string) => {\n    return {\n      type: 'ADD_NOTIFICATION',\n      projectRoot,\n      id,\n      message,\n      tag,\n      logLevel,\n    };\n  },\n\n  clear: (projectRoot: string, id: string) => {\n    return {\n      type: 'CLEAR_NOTIFICATION',\n      projectRoot,\n      id,\n    };\n  },\n\n  addGlobal: (id: string, message: string, tag: string, logLevel: string) => {\n    return {\n      type: 'ADD_NOTIFICATION',\n      projectRoot: GLOBAL,\n      id,\n      message,\n      tag,\n      logLevel,\n    };\n  },\n\n  clearGlobal: (id: string) => {\n    return {\n      type: 'CLEAR_NOTIFICATION',\n      projectRoot: GLOBAL,\n      id,\n    };\n  },\n};\n\nexport const reducer = (state: any = {}, action: any) => {\n  switch (action.type) {\n    case 'ADD_NOTIFICATION':\n      return _addNotification(state, action);\n    case 'CLEAR_NOTIFICATION':\n      return _clearNotification(state, action);\n    default:\n      return state;\n  }\n};\n\nfunction _addNotification(state: any, action: any) {\n  let { projectRoot, id, message, tag, logLevel } = action;\n\n  if (logLevel !== 'info' && logLevel !== 'warn' && logLevel !== 'error') {\n    logLevel = 'info';\n  }\n\n  let projectObject = state[projectRoot] || INITIAL_PROJECT_STATE;\n  projectObject = JSON.parse(JSON.stringify(projectObject));\n  let arrayOfIssues = projectObject[logLevel];\n  let index = _.findIndex(arrayOfIssues, { id });\n  if (index === -1) {\n    arrayOfIssues.push({\n      id,\n      message,\n      tag,\n      count: 0,\n    });\n  } else {\n    arrayOfIssues[index] = {\n      id,\n      message,\n      tag,\n      count: arrayOfIssues[index].count + 1,\n    };\n  }\n\n  // TODO: switch to immutable.js\n  let newState = JSON.parse(JSON.stringify(state));\n  projectObject[logLevel] = arrayOfIssues;\n  _setCount(projectObject);\n  newState[projectRoot] = projectObject;\n  return newState;\n}\n\nfunction _clearNotification(state: any, action: any) {\n  let { projectRoot, id } = action;\n\n  if (!state[projectRoot]) {\n    return state;\n  }\n\n  let projectObject = state[projectRoot];\n  let newProjectObject = {};\n  _.forEach(projectObject, function(array, key) {\n    if (Array.isArray(array)) {\n      _.remove(array, notification => {\n        if (notification.id === id) {\n          console.log('REMOVED' + id);\n        }\n        return notification.id === id;\n      });\n\n      newProjectObject[key] = array;\n    }\n  });\n\n  _setCount(newProjectObject);\n  // TODO: switch to immutable.js\n  let newState = JSON.parse(JSON.stringify(state));\n  newState[projectRoot] = newProjectObject;\n  return newState;\n}\n\nfunction _setCount(projectObject: any) {\n  projectObject.count = projectObject.warn.length + projectObject.error.length;\n  if (projectObject.count === 0) {\n    projectObject.color = '#595C68';\n  } else {\n    projectObject.color = projectObject.error.length > 0 ? '#F6345D' : '#FF8C00';\n  }\n\n  return projectObject;\n}\n"],"sourceRoot":"/xdl/src"}