{"version":3,"sources":["__tests__/project/ProjectUtils-test.js"],"names":["jest","mock","mkdirp","require","mockfs","path","slugify","packageJson","name","version","expJson","sdkVersion","slug","appJson","expo","packageJsonWithExp","exp","expJsonWithNodeModulesPath","nodeModulesPath","setupDirs","fs","packageJsonString","JSON","stringify","__configureFs","describe","beforeEach","async","afterEach","restore","it","await","ProjectUtils","configFilenameAsync","expect","toEqual","prevDevTool","Config","developerTool","noExpJson","noAppJson","pkg","readConfigJsonAsync"],"mappings":"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","file":"../../../__tests__/project/ProjectUtils-test.js","sourcesContent":["jest.mock('analytics-node');\njest.mock('fs');\n\nconst mkdirp = require('mkdirp');\nconst mockfs = require('mock-fs');\nconst path = require('path');\nconst slugify = require('slugify');\n\nimport * as ProjectUtils from '../../project/ProjectUtils';\nimport Config from '../../Config';\n\nconst packageJson = {\n  name: 'testing123',\n  version: '0.5.0',\n};\n\n// these are intentionally different from package.json -- easy way to test fallbacks\nconst expJson = {\n  sdkVersion: '12.0.0',\n  name: 'My New Project',\n  slug: 'my-new-project',\n  version: '1.0.0',\n};\n\nconst appJson = {\n  expo: {\n    sdkVersion: '12.0.0',\n  },\n};\n\nconst packageJsonWithExp = {\n  name: 'testing456',\n  version: '0.7.0',\n  exp: expJson,\n};\n\nconst expJsonWithNodeModulesPath = {\n  sdkVersion: '12.0.0',\n  name: 'My New Project',\n  slug: 'my-new-project',\n  version: '1.0.0',\n  nodeModulesPath: 'node-modules-path',\n};\n\nfunction setupDirs() {\n  const fs = require('fs');\n\n  const packageJsonString = JSON.stringify(packageJson, null, 2);\n  fs.__configureFs({\n    '/home/mocky/appjson/package.json': packageJsonString,\n    '/home/mocky/appjson/app.json': JSON.stringify(appJson, null, 2),\n    '/home/mocky/expjson/package.json': packageJsonString,\n    '/home/mocky/expjson/exp.json': JSON.stringify(expJson, null, 2),\n    '/home/mocky/nojson/package.json': JSON.stringify(packageJsonWithExp, null, 2),\n    '/home/mocky/expjson-with-node-modules/exp.json': JSON.stringify(\n      expJsonWithNodeModulesPath,\n      null,\n      2\n    ),\n    '/home/mocky/expjson-with-node-modules/node-modules-path/package.json': packageJsonString,\n  });\n}\n\ndescribe('configFilenameAsync', () => {\n  beforeEach(async () => {\n    setupDirs();\n  });\n\n  afterEach(() => {\n    mockfs.restore();\n  });\n\n  it('checks configfile heuristics are correct', async () => {\n    const appJson = await ProjectUtils.configFilenameAsync('/home/mocky/appjson');\n    expect(appJson).toEqual('app.json');\n\n    const expJson = await ProjectUtils.configFilenameAsync('/home/mocky/expjson');\n    expect(expJson).toEqual('exp.json');\n\n    const prevDevTool = Config.developerTool;\n\n    Config.developerTool = 'exp';\n    const noExpJson = await ProjectUtils.configFilenameAsync('/doesntexist');\n    expect(noExpJson).toEqual('exp.json');\n\n    Config.developerTool = 'crna';\n    const noAppJson = await ProjectUtils.configFilenameAsync('/doesntexist');\n    expect(noAppJson).toEqual('app.json');\n\n    Config.developerTool = prevDevTool;\n  });\n});\n\ndescribe('readConfigJsonAsync', () => {\n  beforeEach(async () => {\n    setupDirs();\n  });\n\n  afterEach(() => {\n    mockfs.restore();\n  });\n\n  it('parses a project root with a normal exp.json', async () => {\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync('/home/mocky/expjson');\n\n    expect(exp).toEqual(expJson);\n    expect(pkg).toEqual(packageJson);\n  });\n\n  it('parses a project root with only a package.json', async () => {\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync('/home/mocky/nojson');\n\n    expect(exp).toEqual(expJson);\n    expect(pkg).toEqual(packageJsonWithExp);\n  });\n\n  it('parses a project root with an app.json relying on package.json fallbacks', async () => {\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync('/home/mocky/appjson');\n\n    expect(exp.sdkVersion).toEqual(appJson.expo.sdkVersion);\n    expect(exp.version).toEqual(packageJson.version);\n    expect(exp.name).toEqual(packageJson.name);\n    expect(exp.slug).toEqual(slugify(packageJson.name));\n\n    expect(pkg).toEqual(packageJson);\n  });\n\n  it('reads package.json at nodeModulesPath', async () => {\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(\n      '/home/mocky/expjson-with-node-modules'\n    );\n\n    expect(exp).toEqual(expJsonWithNodeModulesPath);\n    expect(pkg).toEqual(packageJson);\n  });\n});\n"],"sourceRoot":"/xdl/src"}