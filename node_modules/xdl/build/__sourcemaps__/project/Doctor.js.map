{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","await","Binaries","sourceBashLoginScriptsAsync","let","yarnVersionResponse","spawnAsync","status","NO_ISSUES","e","npmVersionResponse","npmVersion","_","trim","stdout","semver","lt","MIN_NPM_VERSION","_isNpmVersionWithinRanges","BAD_NPM_VERSION_RANGES","ProjectUtils","logError","CORRECT_NPM_VERSION","WARNING","WARN_NPM_VERSION_RANGES","logWarning","clearNotification","_checkNpmVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","MIN_WATCHMAN_VERSION","warningMessage","process","platform","_checkWatchmanVersionAsync","schemaPath","exp","pkg","readConfigJsonAsync","schema","JSON","parse","fs","readFile","validateWithSchema","validateWithSchemaFileAsync","configName","sdkVersion","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","rootDir","validateSchemaAsync","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","validation","reactNativeVersionWarnings","reactNative","dependencies","match","sdkVersions","Api","sdkVersionsAsync","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","_validatePackageJsonAsync","allowNetwork","FATAL","message","expJsonExists","fileExistsAsync","path","appJsonExists","configFilenameAsync","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","ExpSchema","getSchemaAsync","ERROR","keys","reactNativeIssue","_validateReactNativeVersionAsync","_validateExpJsonAsync","nodeModulesPath","result","statSync","isDirectory","isFile","npmls","npmlsCommand","cwd","signal","npmlsDependencies","errorStrings","forEach","versionRequired","dependency","installedDependency","version","peerMissing","push","satisfies","includes","from","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","getenv","boolish","expStatus","packageStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","ranges","some","range","validationError","fieldPath"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\n\nimport Schemer, { SchemerError } from '@expo/schemer';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = '4.6.1';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion, ranges) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      let yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile(schemaPath, 'utf8'));\n  return validateWithSchema(projectRoot, exp, schema.schema, 'exp.json', 'UNVERSIONED', true);\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  let validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${e.errors.length > 1\n        ? 's'\n        : ''} validating fields in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${e.errors.length > 1\n          ? ''\n          : 's'} validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError) {\n  return `\\n • ${validationError.fieldPath\n    ? 'Field: ' + validationError.fieldPath + ' - '\n    : ''}${validationError.message}.`;\n}\n\nasync function _validatePackageJsonAsync(exp, pkg, projectRoot): Promise<number> {\n  // TODO: Check any native module versions here\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // Expo fork of react-native is required\n    if (!reactNative.match(/expo\\/react-native/)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    let sdkVersions = await Api.sdkVersionsAsync();\n    let sdkVersion = exp.sdkVersion;\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n  return NO_ISSUES;\n}\n\nasync function _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(path.join(projectRoot, 'exp.json'));\n  const appJsonExists = await ProjectUtils.fileExistsAsync(path.join(projectRoot, 'app.json'));\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n\n  // Skip validation if the correct token is set in env\n  if (!(sdkVersion === 'UNVERSIONED' && process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN)) {\n    try {\n      let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      let { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        sdkVersion,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Can't find react-native in package.json dependencies`,\n      'doctor-no-react-native-in-package-json'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp,\n  pkg,\n  projectRoot,\n  sdkVersions,\n  sdkVersion\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    if (!reactNative.match(/expo\\/react-native/)) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n      //\n      // ProjectUtils.logWarning(\n      //   projectRoot,\n      //   'expo',\n      //   `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n      //   'doctor-not-using-expo-fork'\n      // );\n      // return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(\n      path.join(nodeModulesPath, 'node_modules', 'react-native', 'local-cli', 'cli.js')\n    );\n    if (!result.isFile()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`,\n        'doctor-npm-not-found'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync('npm', ['ls', '--json', '--depth', '1'], {\n        cwd: nodeModulesPath,\n      });\n      npmls = npmlsCommand.stdout;\n      if (npmlsCommand.signal === 'SIGINT') {\n        // The child process was interrupted (e.g. the user pressed ^C),\n        // let's not spam the console with warnings about that.\n        return NO_ISSUES;\n      }\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n      if (e.signal === 'SIGINT') {\n        // The child process was interrupted (e.g. the user pressed ^C),\n        // let's not spam the console with warnings about that.\n        return NO_ISSUES;\n      }\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`,\n        'doctor-could-not-run-npm-ls'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies: ${e.message}`,\n        'doctor-problem-checking-node-modules'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-node-modules');\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (dependency === 'react' && versionRequired.match(/-(alpha|beta|rc)/)) {\n          // ignore prerelease dependencies on react\n        } else if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(\n              `Warning: '${dependency}' peer dependency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`\n            );\n          } else {\n            errorStrings.push(`Warning: '${dependency}' dependency is not installed.`);\n          }\n        } else if (\n          dependency === 'expo' &&\n          exp.sdkVersion !== 'UNVERSIONED' &&\n          semver.major(installedDependency.version) !== semver.major(exp.sdkVersion)\n        ) {\n          // Warn user if versions are not aligned\n          errorStrings.push(\n            'Warning: Expo version in package.json does not match sdkVersion in manifest.'\n          );\n        } else if (\n          dependency !== 'react-native' &&\n          !semver.satisfies(installedDependency.version, versionRequired) &&\n          !versionRequired.includes(installedDependency.from)\n        ) {\n          // TODO: also check react-native\n          // For react native, `from` field looks like \"expo/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:expo/react-native#sdk-8.0.0\"\n          errorStrings.push(\n            `Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`\n          );\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(\n          `\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`\n        );\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          errorStrings.join('\\n'),\n          'doctor-node-modules-issues'\n        );\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-issues');\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(projectRoot: string, allowNetwork: boolean): Promise<number> {\n  if (getenv.boolish('EXPO_NO_DOCTOR', false)) {\n    return NO_ISSUES;\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork);\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  const packageStatus = await _validatePackageJsonAsync(exp, pkg, projectRoot);\n\n  status = Math.max(status, expStatus, packageStatus);\n  if (status === FATAL) return status;\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\ntype ExpoSdkStatus = 0 | 1 | 2;\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<ExpoSdkStatus> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from '${sdkPkg}'`) || mainFile.includes(`require('${sdkPkg}')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}