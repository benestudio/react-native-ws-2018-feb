{"version":3,"sources":["project/ExpSchema.js"],"names":["async","projectRoot","exp","await","ProjectUtils","readConfigJsonAsync","Error","schema","getSchemaAsync","sdkVersion","validator","validatorFromProjectRoot","let","json","_getSchemaJSONAsync","assetSchemas","visit","node","fieldPath","meta","asset","push","properties","Object","keys","forEach","property","length","getAssetSchemasAsync","process","env","LOCAL_XDL_SCHEMA","EXPONENT_UNIVERSE_DIR","JSON","parse","fs","readFileSync","path","join","toString","_xdlSchemaJson","Api","xdlSchemaAsync","e","code","ErrorCode","INVALID_JSON"],"mappings":";;;;;;;;+BAcOA,WAAwCC,WAAxCD,EAAsE;AAC3E,UAAM,EAAEE,GAAF,KAAUC,MAAMC,wCAAaC,mBAAbD,CAAiCH,WAAjCG,CAAtB;AACA,QAAI,CAACF,GAAL,EAAU,MAAM,IAAII,KAAJ,CAAW,8BAAX,CAAN;AACV,UAAMC,SAASJ,MAAMK,eAAeN,IAAIO,UAAnBD,CAArB;AACA,UAAME,YAAY,0CAAYH,MAAZ,CAAlB;AACA,WAAOG,SAAP;AACF,G;;kBANsBC,wB;;;;;;gCAQfX,WAA8BS,UAA9BT,EAAkD;AACvDY,QAAIC,OAAOV,MAAMW,oBAAoBL,UAApBK,CAAjBF;AACA,WAAOC,KAAKN,MAAZ;AACF,G;;kBAHsBC,c;;;;;AAKtB;AACA;;;;gCACOR,WAAoCS,UAApCT,EAAwD;AAC7D,UAAMO,SAASJ,MAAMK,eAAeC,UAAfD,CAArB;AACA,UAAMO,eAAe,EAArB;AACA,UAAMC,QAAQ,UAACC,IAAD,EAAOC,SAAP,EAAqB;AACjC,UAAID,KAAKE,IAALF,IAAaA,KAAKE,IAALF,CAAUG,KAA3B,EAAkC;AAChCL,qBAAaM,IAAbN,CAAkB,EAAER,QAAQU,IAAV,EAAgBC,SAAhB,EAAlBH;AACF;AACA,YAAMO,aAAaL,KAAKK,UAAxB;AACA,UAAIA,UAAJ,EAAgB;AACdC,eAAOC,IAAPD,CAAYD,UAAZC,EAAwBE,OAAxBF,CAAgCG;AAAAA,iBAC9BV,MAAMM,WAAWI,QAAXJ,CAANN,EAA6B,GAAEE,SAAU,GAAEA,UAAUS,MAAVT,GAAmB,CAAnBA,GAAuB,GAAvBA,GAA6B,EAAG,GAAEQ,QAAS,EAAtFV,CAD8BU;AAAAA,SAAhCH;AAGF;AACD,KAVD;AAWAP,UAAMT,MAANS,EAAc,EAAdA;AACA,WAAOD,YAAP;AACF,G;;kBAhBsBa,oB;;;;;;gCAkBtB5B,WAAmCS,UAAnCT,EAA+C;AAC7C,QAAI6B,QAAQC,GAARD,CAAYE,gBAAhB,EAAkC;AAChC,UAAIF,QAAQC,GAARD,CAAYG,qBAAhB,EAAuC;AACrC,eAAOC,KAAKC,KAALD,CACLE,YACGC,YADHD,CAEIE,cAAKC,IAALD,CACER,QAAQC,GAARD,CAAYG,qBADdK,EAEE,QAFFA,EAGE,KAHFA,EAIE,aAJFA,EAKE,yBALFA,CAFJF,EAUGI,QAVHJ,EADKF,CAAP;AAaF,OAdA,MAcO;AACL,cAAM,IAAI3B,KAAJ,CAAW,2DAAX,CAAN;AACF;AACF;;AAEA,QAAI,CAACkC,eAAe/B,UAAf+B,CAAL,EAAiC;AAC/B,UAAI;AACFA,uBAAe/B,UAAf+B,IAA6BrC,MAAMsC,8BAAIC,cAAJD,CAAmBhC,UAAnBgC,CAAnCD;AACF,OAFA,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIA,EAAEC,IAAFD,IAAUA,EAAEC,IAAFD,KAAWE,0CAAUC,YAAnC,EAAiD;AAC/C,gBAAM,IAAIxC,KAAJ,CAAW,kCAAX,CAAN;AACF,SAFA,MAEO;AACL,gBAAMqC,CAAN;AACF;AACF;AACF;;AAEA,WAAOH,eAAe/B,UAAf+B,CAAP;AACF,G;;kBAlCe1B,mB;;;;;AA3Cf;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;;;;;AAEAF,IAAI4B,iBAAiB,EAArB5B","file":"../../project/ExpSchema.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\nimport * as ProjectUtils from './ProjectUtils';\n\nimport Schemer from '@expo/schemer';\n\nlet _xdlSchemaJson = {};\n\nexport async function validatorFromProjectRoot(projectRoot: string): Schemer {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp) throw new Error(`Couldn't read local manifest`);\n  const schema = await getSchemaAsync(exp.sdkVersion);\n  const validator = new Schemer(schema);\n  return validator;\n}\n\nexport async function getSchemaAsync(sdkVersion: string) {\n  let json = await _getSchemaJSONAsync(sdkVersion);\n  return json.schema;\n}\n\n// Array of schema nodes that refer to assets along with their field\n// path (eg. 'notification.icon')\nexport async function getAssetSchemasAsync(sdkVersion: string) {\n  const schema = await getSchemaAsync(sdkVersion);\n  const assetSchemas = [];\n  const visit = (node, fieldPath) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push({ schema: node, fieldPath });\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach(property =>\n        visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`)\n      );\n    }\n  };\n  visit(schema, '');\n  return assetSchemas;\n}\n\nasync function _getSchemaJSONAsync(sdkVersion) {\n  if (process.env.LOCAL_XDL_SCHEMA) {\n    if (process.env.EXPONENT_UNIVERSE_DIR) {\n      return JSON.parse(\n        fs\n          .readFileSync(\n            path.join(\n              process.env.EXPONENT_UNIVERSE_DIR,\n              'server',\n              'www',\n              'xdl-schemas',\n              'UNVERSIONED-schema.json'\n            )\n          )\n          .toString()\n      );\n    } else {\n      throw new Error(`LOCAL_XDL_SCHEMA is set but EXPONENT_UNIVERSE_DIR is not.`);\n    }\n  }\n\n  if (!_xdlSchemaJson[sdkVersion]) {\n    try {\n      _xdlSchemaJson[sdkVersion] = await Api.xdlSchemaAsync(sdkVersion);\n    } catch (e) {\n      if (e.code && e.code === ErrorCode.INVALID_JSON) {\n        throw new Error(`Couldn't read schema from server`);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return _xdlSchemaJson[sdkVersion];\n}\n"],"sourceRoot":"/xdl/src"}