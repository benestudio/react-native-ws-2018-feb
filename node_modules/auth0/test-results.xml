<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.40800000000000025" tests="647" failures="0">
  <testsuite name="Root Suite" timestamp="2017-06-16T20:59:48" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="AuthenticationClient" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/authentication-client.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/authentication-client.tests.js" failures="0" time="0.001">
    <testcase name="AuthenticationClient #constructor should raise an error when no options object is provided" time="0.001" classname="should raise an error when no options object is provided">
    </testcase>
    <testcase name="AuthenticationClient #constructor should raise an error when the domain is not valid" time="0" classname="should raise an error when the domain is not valid">
    </testcase>
  </testsuite>
  <testsuite name="instance properties" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/authentication-client.tests.js" failures="0" time="0">
    <testcase name="AuthenticationClient instance properties should expose an instance of OAuthAuthenticator" time="0" classname="should expose an instance of OAuthAuthenticator">
    </testcase>
    <testcase name="AuthenticationClient instance properties should expose an instance of DatabaseAuthenticator" time="0" classname="should expose an instance of DatabaseAuthenticator">
    </testcase>
    <testcase name="AuthenticationClient instance properties should expose an instance of PasswordlessAuthenticator" time="0" classname="should expose an instance of PasswordlessAuthenticator">
    </testcase>
    <testcase name="AuthenticationClient instance properties should expose an instance of UsersManager" time="0" classname="should expose an instance of UsersManager">
    </testcase>
    <testcase name="AuthenticationClient instance properties should expose an instance of TokensManager" time="0" classname="should expose an instance of TokensManager">
    </testcase>
  </testsuite>
  <testsuite name="DatabaseAuthenticator" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="1" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0">
    <testcase name="DatabaseAuthenticator #constructor should require an options object" time="0" classname="should require an options object">
    </testcase>
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0.001">
    <testcase name="DatabaseAuthenticator instance should have a signIn method" time="0.001" classname="should have a signIn method">
    </testcase>
    <testcase name="DatabaseAuthenticator instance should have a signUp method" time="0" classname="should have a signUp method">
    </testcase>
    <testcase name="DatabaseAuthenticator instance should have a changePassword method" time="0" classname="should have a changePassword method">
    </testcase>
    <testcase name="DatabaseAuthenticator instance should have a requestChangePasswordEmail method" time="0" classname="should have a requestChangePasswordEmail method">
    </testcase>
  </testsuite>
  <testsuite name="#signIn" timestamp="2017-06-16T20:59:48" tests="13" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0.033">
    <testcase name="DatabaseAuthenticator #signIn should require an object as first argument" time="0" classname="should require an object as first argument">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should require a username" time="0" classname="should require a username">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should require a password" time="0" classname="should require a password">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should accept a callback" time="0.019" classname="should accept a callback">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should return a promise when no callback is provided" time="0.003" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should perform a POST request to /oauth/ro" time="0.001" classname="should perform a POST request to /oauth/ro">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should include the user data in the request" time="0.001" classname="should include the user data in the request">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should use Username-Password-Authentication by default" time="0.001" classname="should use Username-Password-Authentication by default">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should allow the user to specify the connection" time="0.004" classname="should allow the user to specify the connection">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should use password as default grant type" time="0.001" classname="should use password as default grant type">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should allow the user to specify the grant type" time="0.001" classname="should allow the user to specify the grant type">
    </testcase>
    <testcase name="DatabaseAuthenticator #signIn should use the openid scope by default" time="0.001" classname="should use the openid scope by default">
    </testcase>
  </testsuite>
  <testsuite name="#signUp" timestamp="2017-06-16T20:59:48" tests="9" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0.008">
    <testcase name="DatabaseAuthenticator #signUp should require an object as first argument" time="0.001" classname="should require an object as first argument">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should require an email" time="0" classname="should require an email">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should require a password" time="0" classname="should require a password">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should require a connection" time="0.001" classname="should require a connection">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should return a promise when no callback is provided" time="0.002" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should perform a POST request to /dbconnections/signup" time="0.001" classname="should perform a POST request to /dbconnections/signup">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should include the user data in the request" time="0.001" classname="should include the user data in the request">
    </testcase>
    <testcase name="DatabaseAuthenticator #signUp should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
  </testsuite>
  <testsuite name="#changePassword" timestamp="2017-06-16T20:59:48" tests="9" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0.005">
    <testcase name="DatabaseAuthenticator #changePassword should require an object as first argument" time="0.001" classname="should require an object as first argument">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should require an email" time="0" classname="should require an email">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should require a password" time="0" classname="should require a password">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should require a connection" time="0.001" classname="should require a connection">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should return a promise when no callback is provided" time="0" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should perform a POST request to /dbconnections/change_password" time="0.001" classname="should perform a POST request to /dbconnections/change_password">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should include the user data in the request" time="0.001" classname="should include the user data in the request">
    </testcase>
    <testcase name="DatabaseAuthenticator #changePassword should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
  </testsuite>
  <testsuite name="#requestChangePasswordEmail" timestamp="2017-06-16T20:59:48" tests="8" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/database-auth.tests.js" failures="0" time="0.004">
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should require an object as first argument" time="0" classname="should require an object as first argument">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should require an email" time="0" classname="should require an email">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should require a connection" time="0" classname="should require a connection">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should return a promise when no callback is provided" time="0" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should perform a POST request to /dbconnections/change_password" time="0.001" classname="should perform a POST request to /dbconnections/change_password">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should include the user data in the request" time="0.001" classname="should include the user data in the request">
    </testcase>
    <testcase name="DatabaseAuthenticator #requestChangePasswordEmail should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
  </testsuite>
  <testsuite name="OAuthAuthenticator" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="1" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0">
    <testcase name="OAuthAuthenticator #constructor should require an options object" time="0" classname="should require an options object">
    </testcase>
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0">
    <testcase name="OAuthAuthenticator instance should have a signIn method" time="0" classname="should have a signIn method">
    </testcase>
    <testcase name="OAuthAuthenticator instance should have a socialSignIn method" time="0" classname="should have a socialSignIn method">
    </testcase>
  </testsuite>
  <testsuite name="#signIn" timestamp="2017-06-16T20:59:48" tests="11" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0.007">
    <testcase name="OAuthAuthenticator #signIn should require an object as first argument" time="0" classname="should require an object as first argument">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should require a connection" time="0.001" classname="should require a connection">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should return a promise when no callback is provided" time="0.001" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should perform a POST request to /oauth/ro" time="0" classname="should perform a POST request to /oauth/ro">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should include the user data un the request" time="0.001" classname="should include the user data un the request">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should allow the user to specify the connection" time="0" classname="should allow the user to specify the connection">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should use password as default grant type" time="0.001" classname="should use password as default grant type">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should allow the user to specify the grant type" time="0.001" classname="should allow the user to specify the grant type">
    </testcase>
    <testcase name="OAuthAuthenticator #signIn should use the openid scope by default" time="0" classname="should use the openid scope by default">
    </testcase>
  </testsuite>
  <testsuite name="#socialSignIn" timestamp="2017-06-16T20:59:48" tests="13" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0.008">
    <testcase name="OAuthAuthenticator #socialSignIn should require an object as first argument" time="0" classname="should require an object as first argument">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should require an access token" time="0" classname="should require an access token">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should require a connection" time="0.001" classname="should require a connection">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should require a connection" time="0" classname="should require a connection">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should not return a promise when a callback is given" time="0" classname="should not return a promise when a callback is given">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should perform a POST request to /oauth/access_token" time="0.001" classname="should perform a POST request to /oauth/access_token">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should use the default client ID if none specified" time="0.002" classname="should use the default client ID if none specified">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should allow the user to specify a custom client ID" time="0.001" classname="should allow the user to specify a custom client ID">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should use the openid scope by default" time="0.001" classname="should use the openid scope by default">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should allow the user to specify the scope" time="0.001" classname="should allow the user to specify the scope">
    </testcase>
    <testcase name="OAuthAuthenticator #socialSignIn should use application/json as Content-Type" time="0.001" classname="should use application/json as Content-Type">
    </testcase>
  </testsuite>
  <testsuite name="#clientCredentials" timestamp="2017-06-16T20:59:48" tests="11" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/oauth.tests.js" failures="0" time="0.013000000000000001">
    <testcase name="OAuthAuthenticator #clientCredentials should require an object as first argument" time="0.001" classname="should require an object as first argument">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should require the client_id" time="0.001" classname="should require the client_id">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should require the client_secret" time="0" classname="should require the client_secret">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should return a promise when no callback is provided" time="0.001" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should perform a POST request to /oauth/token" time="0.001" classname="should perform a POST request to /oauth/token">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should include the options in the request" time="0.002" classname="should include the options in the request">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should include the Auth0 client ID and secret in the request" time="0.001" classname="should include the Auth0 client ID and secret in the request">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should allow the user to specify the audience and scope" time="0.003" classname="should allow the user to specify the audience and scope">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should use client_credentials as default grant type" time="0.001" classname="should use client_credentials as default grant type">
    </testcase>
    <testcase name="OAuthAuthenticator #clientCredentials should allow the user to specify the grant type" time="0.001" classname="should allow the user to specify the grant type">
    </testcase>
  </testsuite>
  <testsuite name="PasswordlessAuthenticator" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="1" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0">
    <testcase name="PasswordlessAuthenticator #constructor should require an options object" time="0" classname="should require an options object">
    </testcase>
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0.001">
    <testcase name="PasswordlessAuthenticator instance should have a signIn method" time="0" classname="should have a signIn method">
    </testcase>
    <testcase name="PasswordlessAuthenticator instance should have a sendEmail method" time="0.001" classname="should have a sendEmail method">
    </testcase>
    <testcase name="PasswordlessAuthenticator instance should have a sendSMS method" time="0" classname="should have a sendSMS method">
    </testcase>
  </testsuite>
  <testsuite name="#signIn" timestamp="2017-06-16T20:59:48" tests="12" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0.009000000000000001">
    <testcase name="PasswordlessAuthenticator #signIn should require an object as first argument" time="0.001" classname="should require an object as first argument">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should require a phone number" time="0.001" classname="should require a phone number">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should require a verification code" time="0" classname="should require a verification code">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should return a promise when no callback is provided" time="0" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should perform a POST request to /oauth/ro" time="0" classname="should perform a POST request to /oauth/ro">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should include the user data in the request" time="0.002" classname="should include the user data in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should include the Auth0 client ID in the request" time="0.001" classname="should include the Auth0 client ID in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should use SMS connection" time="0.001" classname="should use SMS connection">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn shouldn&apos;t allow the user to specify the connection" time="0" classname="shouldn&apos;t allow the user to specify the connection">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should use password as grant type" time="0.001" classname="should use password as grant type">
    </testcase>
    <testcase name="PasswordlessAuthenticator #signIn should use the openid scope" time="0.001" classname="should use the openid scope">
    </testcase>
  </testsuite>
  <testsuite name="#sendEmail" timestamp="2017-06-16T20:59:48" tests="11" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0.012">
    <testcase name="PasswordlessAuthenticator #sendEmail should require an object as first argument" time="0.001" classname="should require an object as first argument">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should require an email" time="0" classname="should require an email">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should require the send field" time="0" classname="should require the send field">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should return a promise when no callback is provided" time="0" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should perform a POST request to /passwordless/start" time="0" classname="should perform a POST request to /passwordless/start">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should include the user data in the request" time="0.003" classname="should include the user data in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should include the Auth0 client ID in the request" time="0.004" classname="should include the Auth0 client ID in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should use the email connection" time="0.002" classname="should use the email connection">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail should use the specified send type" time="0.001" classname="should use the specified send type">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendEmail shouldn&apos;t allow the user to specify the connection" time="0" classname="shouldn&apos;t allow the user to specify the connection">
    </testcase>
  </testsuite>
  <testsuite name="#sendSMS" timestamp="2017-06-16T20:59:48" tests="9" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/passwordless.tests.js" failures="0" time="0.006">
    <testcase name="PasswordlessAuthenticator #sendSMS should require an object as first argument" time="0" classname="should require an object as first argument">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should require a phone number" time="0.001" classname="should require a phone number">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should return a promise when no callback is provided" time="0.001" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should perform a POST request to /passwordless/start" time="0.002" classname="should perform a POST request to /passwordless/start">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should include the user data in the request" time="0" classname="should include the user data in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should include the Auth0 client ID in the request" time="0" classname="should include the Auth0 client ID in the request">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS should use the sms connection" time="0.001" classname="should use the sms connection">
    </testcase>
    <testcase name="PasswordlessAuthenticator #sendSMS shouldn&apos;t allow the user to specify the connection" time="0.001" classname="shouldn&apos;t allow the user to specify the connection">
    </testcase>
  </testsuite>
  <testsuite name="TokensManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/tokens-manager.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/tokens-manager.tests.js" failures="0" time="0">
    <testcase name="TokensManager #constructor should require an options object" time="0" classname="should require an options object">
    </testcase>
    <testcase name="TokensManager #constructor should require a base URL" time="0" classname="should require a base URL">
    </testcase>
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/tokens-manager.tests.js" failures="0" time="0">
    <testcase name="TokensManager instance should have a getInfo method" time="0" classname="should have a getInfo method">
    </testcase>
    <testcase name="TokensManager instance should have a getDelegationToken method" time="0" classname="should have a getDelegationToken method">
    </testcase>
  </testsuite>
  <testsuite name="#getInfo" timestamp="2017-06-16T20:59:48" tests="9" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/tokens-manager.tests.js" failures="0" time="0.011000000000000003">
    <testcase name="TokensManager #getInfo should require an ID token" time="0" classname="should require an ID token">
    </testcase>
    <testcase name="TokensManager #getInfo should throw an error when the token is invalid" time="0.001" classname="should throw an error when the token is invalid">
    </testcase>
    <testcase name="TokensManager #getInfo should not throw errors when the token is valid" time="0.005" classname="should not throw errors when the token is valid">
    </testcase>
    <testcase name="TokensManager #getInfo should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="TokensManager #getInfo should return a promise when no callback is provided" time="0" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="TokensManager #getInfo should not return a promise when a callback is provided" time="0" classname="should not return a promise when a callback is provided">
    </testcase>
    <testcase name="TokensManager #getInfo should perform a POST request to /tokeninfo" time="0.001" classname="should perform a POST request to /tokeninfo">
    </testcase>
    <testcase name="TokensManager #getInfo should include the headers specified in the instance options" time="0.001" classname="should include the headers specified in the instance options">
    </testcase>
    <testcase name="TokensManager #getInfo should send the ID token in the body of the request" time="0.001" classname="should send the ID token in the body of the request">
    </testcase>
  </testsuite>
  <testsuite name="#getDelegationToken" timestamp="2017-06-16T20:59:48" tests="14" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/tokens-manager.tests.js" failures="0" time="0.009000000000000001">
    <testcase name="TokensManager #getDelegationToken should require a data object" time="0.001" classname="should require a data object">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should require an ID token or refresh token" time="0" classname="should require an ID token or refresh token">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should not accept an ID token and a refresh token simulatenously" time="0" classname="should not accept an ID token and a refresh token simulatenously">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should require a target client" time="0" classname="should require a target client">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should require an API type" time="0" classname="should require an API type">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should require an grant type" time="0" classname="should require an grant type">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should return a promise when no callback is given" time="0.001" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should not return a promise when a callback is given" time="0" classname="should not return a promise when a callback is given">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should perform a POST request to /delegation" time="0" classname="should perform a POST request to /delegation">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should include the data in the body of the request" time="0.002" classname="should include the data in the body of the request">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should use the instance client ID if none specified" time="0.001" classname="should use the instance client ID if none specified">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should let the user override the default client ID" time="0.001" classname="should let the user override the default client ID">
    </testcase>
    <testcase name="TokensManager #getDelegationToken should include the headers specified in the instance options" time="0.001" classname="should include the headers specified in the instance options">
    </testcase>
  </testsuite>
  <testsuite name="UsersManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/users-manager.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/users-manager.tests.js" failures="0" time="0">
    <testcase name="UsersManager #constructor should require an options object" time="0" classname="should require an options object">
    </testcase>
    <testcase name="UsersManager #constructor should require a base URL" time="0" classname="should require a base URL">
    </testcase>
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/users-manager.tests.js" failures="0" time="0">
    <testcase name="UsersManager instance should have a getInfo method" time="0" classname="should have a getInfo method">
    </testcase>
    <testcase name="UsersManager instance should have a impersonate method" time="0" classname="should have a impersonate method">
    </testcase>
  </testsuite>
  <testsuite name="#getInfo" timestamp="2017-06-16T20:59:48" tests="9" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/users-manager.tests.js" failures="0" time="0.008">
    <testcase name="UsersManager #getInfo should require an access token" time="0" classname="should require an access token">
    </testcase>
    <testcase name="UsersManager #getInfo should throw an error when the token is invalid" time="0" classname="should throw an error when the token is invalid">
    </testcase>
    <testcase name="UsersManager #getInfo should not throw errors when the token is valid" time="0.001" classname="should not throw errors when the token is valid">
    </testcase>
    <testcase name="UsersManager #getInfo should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #getInfo should not return a promise when a callback is provided" time="0.001" classname="should not return a promise when a callback is provided">
    </testcase>
    <testcase name="UsersManager #getInfo should return a promise when no callback is provided" time="0.001" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="UsersManager #getInfo should perform a GET request to /userinfo" time="0.002" classname="should perform a GET request to /userinfo">
    </testcase>
    <testcase name="UsersManager #getInfo should include the headers specified in the UsersManager options" time="0.001" classname="should include the headers specified in the UsersManager options">
    </testcase>
    <testcase name="UsersManager #getInfo should send the access token in the Authorization header" time="0.001" classname="should send the access token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#impersonate" timestamp="2017-06-16T20:59:48" tests="13" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth/users-manager.tests.js" failures="0" time="0.008">
    <testcase name="UsersManager #impersonate should require a user ID" time="0" classname="should require a user ID">
    </testcase>
    <testcase name="UsersManager #impersonate should throw an error when the user ID is not valid" time="0" classname="should throw an error when the user ID is not valid">
    </testcase>
    <testcase name="UsersManager #impersonate should require the impersonation settings object" time="0.001" classname="should require the impersonation settings object">
    </testcase>
    <testcase name="UsersManager #impersonate should require an impersonator ID" time="0" classname="should require an impersonator ID">
    </testcase>
    <testcase name="UsersManager #impersonate should require a protocol" time="0" classname="should require a protocol">
    </testcase>
    <testcase name="UsersManager #impersonate should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #impersonate should not return a promise when a callback is provided" time="0" classname="should not return a promise when a callback is provided">
    </testcase>
    <testcase name="UsersManager #impersonate should return a promise when no callback is provided" time="0.001" classname="should return a promise when no callback is provided">
    </testcase>
    <testcase name="UsersManager #impersonate should perform a POST request to /users/github%7C12345/impersonate" time="0" classname="should perform a POST request to /users/github%7C12345/impersonate">
    </testcase>
    <testcase name="UsersManager #impersonate should use the default client ID" time="0.001" classname="should use the default client ID">
    </testcase>
    <testcase name="UsersManager #impersonate should allow the user to override the client ID" time="0.001" classname="should allow the user to override the client ID">
    </testcase>
    <testcase name="UsersManager #impersonate should use the default headers" time="0.001" classname="should use the default headers">
    </testcase>
    <testcase name="UsersManager #impersonate should allow the user to add additional parameters" time="0.001" classname="should allow the user to add additional parameters">
    </testcase>
  </testsuite>
  <testsuite name="Auth0 module" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/auth0.tests.js" failures="0" time="0">
    <testcase name="Auth0 module should expose the AuthenticationClient" time="0" classname="should expose the AuthenticationClient">
    </testcase>
    <testcase name="Auth0 module should expose the ManagementClient" time="0" classname="should expose the ManagementClient">
    </testcase>
  </testsuite>
  <testsuite name="BlacklistedTokensManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/blacklisted-tokens.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/blacklisted-tokens.tests.js" failures="0" time="0">
    <testcase name="BlacklistedTokensManager instance should have a add method" time="0" classname="should have a add method">
    </testcase>
    <testcase name="BlacklistedTokensManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/blacklisted-tokens.tests.js" failures="0" time="0">
    <testcase name="BlacklistedTokensManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="BlacklistedTokensManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="BlacklistedTokensManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/blacklisted-tokens.tests.js" failures="0" time="0.007">
    <testcase name="BlacklistedTokensManager #getAll should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.002" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should perform a GET request to /api/v2/blacklists/tokens" time="0.001" classname="should perform a GET request to /api/v2/blacklists/tokens">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="BlacklistedTokensManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#add" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/blacklisted-tokens.tests.js" failures="0" time="0.009000000000000001">
    <testcase name="BlacklistedTokensManager #add should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="BlacklistedTokensManager #add should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="BlacklistedTokensManager #add should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="BlacklistedTokensManager #add should perform a POST request to /api/v2/blacklists/tokens" time="0.001" classname="should perform a POST request to /api/v2/blacklists/tokens">
    </testcase>
    <testcase name="BlacklistedTokensManager #add should pass the token data in the body of the request" time="0.001" classname="should pass the token data in the body of the request">
    </testcase>
    <testcase name="BlacklistedTokensManager #add should include the token in the Authorization header" time="0.005" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="ClientGrantsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0">
    <testcase name="ClientGrantsManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="ClientGrantsManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="ClientGrantsManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="ClientGrantsManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0.001">
    <testcase name="ClientGrantsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="ClientGrantsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="ClientGrantsManager #constructor should throw an error when the base URL is invalid" time="0.001" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0.005">
    <testcase name="ClientGrantsManager #getAll should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should perform a GET request to /api/v2/client-grants" time="0" classname="should perform a GET request to /api/v2/client-grants">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ClientGrantsManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0.004">
    <testcase name="ClientGrantsManager #create should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ClientGrantsManager #create should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientGrantsManager #create should perform a POST request to /api/v2/client-grants" time="0.001" classname="should perform a POST request to /api/v2/client-grants">
    </testcase>
    <testcase name="ClientGrantsManager #create should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ClientGrantsManager #create should include the new client grant data in the request body" time="0.001" classname="should include the new client grant data in the request body">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0.010000000000000002">
    <testcase name="ClientGrantsManager #update should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ClientGrantsManager #update should return a promise if no callback is given" time="0.007" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientGrantsManager #update should perform a PATCH request to /api/v2/client-grants/5" time="0.001" classname="should perform a PATCH request to /api/v2/client-grants/5">
    </testcase>
    <testcase name="ClientGrantsManager #update should include the new data in the body of the request" time="0.001" classname="should include the new data in the body of the request">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client-grants.tests.js" failures="0" time="0.001">
    <testcase name="ClientGrantsManager #delete should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ClientGrantsManager #delete should return a promise when no callback is given" time="0.001" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="ClientGrantsManager #delete should perform a DELETE request to /client-grants/5" time="0" classname="should perform a DELETE request to /client-grants/5">
    </testcase>
  </testsuite>
  <testsuite name="ClientsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0">
    <testcase name="ClientsManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="ClientsManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
    <testcase name="ClientsManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="ClientsManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="ClientsManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0">
    <testcase name="ClientsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="ClientsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="ClientsManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0.004">
    <testcase name="ClientsManager #getAll should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ClientsManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientsManager #getAll should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ClientsManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ClientsManager #getAll should perform a GET request to /api/v2/clients" time="0.001" classname="should perform a GET request to /api/v2/clients">
    </testcase>
    <testcase name="ClientsManager #getAll should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ClientsManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0.004">
    <testcase name="ClientsManager #create should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="ClientsManager #create should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientsManager #create should perform a POST request to /api/v2/clients" time="0.001" classname="should perform a POST request to /api/v2/clients">
    </testcase>
    <testcase name="ClientsManager #create should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ClientsManager #create should include the new client data in the request body" time="0" classname="should include the new client data in the request body">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0.003">
    <testcase name="ClientsManager #get should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="ClientsManager #get should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientsManager #get should perform a POST request to /api/v2/clients/5" time="0.001" classname="should perform a POST request to /api/v2/clients/5">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0.002">
    <testcase name="ClientsManager #update should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ClientsManager #update should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ClientsManager #update should perform a PATCH request to /api/v2/clients/5" time="0" classname="should perform a PATCH request to /api/v2/clients/5">
    </testcase>
    <testcase name="ClientsManager #update should include the new data in the body of the request" time="0.001" classname="should include the new data in the body of the request">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/client.tests.js" failures="0" time="0.002">
    <testcase name="ClientsManager #delete should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ClientsManager #delete should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="ClientsManager #delete should perform a DELETE request to /clients/5" time="0.001" classname="should perform a DELETE request to /clients/5">
    </testcase>
  </testsuite>
  <testsuite name="ConnectionsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.001">
    <testcase name="ConnectionsManager instance should have a getAll method" time="0.001" classname="should have a getAll method">
    </testcase>
    <testcase name="ConnectionsManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
    <testcase name="ConnectionsManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="ConnectionsManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="ConnectionsManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.001">
    <testcase name="ConnectionsManager #constructor should error when no options are provided" time="0.001" classname="should error when no options are provided">
    </testcase>
    <testcase name="ConnectionsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="ConnectionsManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.011">
    <testcase name="ConnectionsManager #getAll should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ConnectionsManager #getAll should return a promise if no callback is given" time="0.002" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ConnectionsManager #getAll should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ConnectionsManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.004" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ConnectionsManager #getAll should perform a GET request to /api/v2/connections" time="0.001" classname="should perform a GET request to /api/v2/connections">
    </testcase>
    <testcase name="ConnectionsManager #getAll should include the token in the Authorization header" time="0.002" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ConnectionsManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.003">
    <testcase name="ConnectionsManager #get should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ConnectionsManager #get should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ConnectionsManager #get should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ConnectionsManager #get should pass the body of the response to the &quot;then&quot; handler" time="0" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ConnectionsManager #get should perform a GET request to /api/v2/connections/:id" time="0" classname="should perform a GET request to /api/v2/connections/:id">
    </testcase>
    <testcase name="ConnectionsManager #get should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="ConnectionsManager #get should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.003">
    <testcase name="ConnectionsManager #create should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ConnectionsManager #create should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ConnectionsManager #create should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ConnectionsManager #create should perform a POST request to /api/v2/connections" time="0.001" classname="should perform a POST request to /api/v2/connections">
    </testcase>
    <testcase name="ConnectionsManager #create should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="ConnectionsManager #create should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.003">
    <testcase name="ConnectionsManager #update should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ConnectionsManager #update should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ConnectionsManager #update should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ConnectionsManager #update should perform a PATCH request to /api/v2/connections/:id" time="0" classname="should perform a PATCH request to /api/v2/connections/:id">
    </testcase>
    <testcase name="ConnectionsManager #update should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="ConnectionsManager #update should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/connections.tests.js" failures="0" time="0.003">
    <testcase name="ConnectionsManager #delete should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ConnectionsManager #delete should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="ConnectionsManager #delete should perform a DELETE request to /connections/5" time="0.001" classname="should perform a DELETE request to /connections/5">
    </testcase>
    <testcase name="ConnectionsManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ConnectionsManager #delete should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="DeviceCredentialsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0">
    <testcase name="DeviceCredentialsManager instance should have a createPublicKey method" time="0" classname="should have a createPublicKey method">
    </testcase>
    <testcase name="DeviceCredentialsManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="DeviceCredentialsManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0">
    <testcase name="DeviceCredentialsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="DeviceCredentialsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="DeviceCredentialsManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0.007">
    <testcase name="DeviceCredentialsManager #getAll should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should return a promise if no callback is given" time="0.002" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should perform a GET request to /api/v2/device-credentials" time="0.001" classname="should perform a GET request to /api/v2/device-credentials">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="DeviceCredentialsManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#createPublicKey" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0.004">
    <testcase name="DeviceCredentialsManager #createPublicKey should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="DeviceCredentialsManager #createPublicKey should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="DeviceCredentialsManager #createPublicKey should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="DeviceCredentialsManager #createPublicKey should perform a POST request to /api/v2/device-credentials" time="0" classname="should perform a POST request to /api/v2/device-credentials">
    </testcase>
    <testcase name="DeviceCredentialsManager #createPublicKey should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="DeviceCredentialsManager #createPublicKey should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/device-credentials.tests.js" failures="0" time="0.002">
    <testcase name="DeviceCredentialsManager #delete should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="DeviceCredentialsManager #delete should return a promise when no callback is given" time="0.001" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="DeviceCredentialsManager #delete should perform a delete request to /device-credentials/5" time="0" classname="should perform a delete request to /device-credentials/5">
    </testcase>
    <testcase name="DeviceCredentialsManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="DeviceCredentialsManager #delete should include the token in the authorization header" time="0.001" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
  <testsuite name="EmailProviderManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0.001">
    <testcase name="EmailProviderManager instance should have a configure method" time="0" classname="should have a configure method">
    </testcase>
    <testcase name="EmailProviderManager instance should have a get method" time="0.001" classname="should have a get method">
    </testcase>
    <testcase name="EmailProviderManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="EmailProviderManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0">
    <testcase name="EmailProviderManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="EmailProviderManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="EmailProviderManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0.002">
    <testcase name="EmailProviderManager #get should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="EmailProviderManager #get should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="EmailProviderManager #get should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="EmailProviderManager #get should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="EmailProviderManager #get should perform a GET request to /api/v2/emails/provider" time="0" classname="should perform a GET request to /api/v2/emails/provider">
    </testcase>
    <testcase name="EmailProviderManager #get should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="EmailProviderManager #get should pass the parameters in the query-string" time="0" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#configure" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0.003">
    <testcase name="EmailProviderManager #configure should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="EmailProviderManager #configure should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="EmailProviderManager #configure should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="EmailProviderManager #configure should perform a POST request to /api/v2/emails/provider" time="0" classname="should perform a POST request to /api/v2/emails/provider">
    </testcase>
    <testcase name="EmailProviderManager #configure should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="EmailProviderManager #configure should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0.003">
    <testcase name="EmailProviderManager #update should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="EmailProviderManager #update should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="EmailProviderManager #update should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="EmailProviderManager #update should perform a PATCH request to /api/v2/emails/provider" time="0" classname="should perform a PATCH request to /api/v2/emails/provider">
    </testcase>
    <testcase name="EmailProviderManager #update should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="EmailProviderManager #update should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/email-provider.tests.js" failures="0" time="0.001">
    <testcase name="EmailProviderManager #delete should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="EmailProviderManager #delete should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="EmailProviderManager #delete should perform a DELETE request to /emails/provider" time="0" classname="should perform a DELETE request to /emails/provider">
    </testcase>
    <testcase name="EmailProviderManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="EmailProviderManager #delete should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="JobsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0">
    <testcase name="JobsManager instance should have a verifyEmail method" time="0" classname="should have a verifyEmail method">
    </testcase>
    <testcase name="JobsManager instance should have a importUsers method" time="0" classname="should have a importUsers method">
    </testcase>
    <testcase name="JobsManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0">
    <testcase name="JobsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="JobsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="JobsManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0.005">
    <testcase name="JobsManager #get should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="JobsManager #get should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="JobsManager #get should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="JobsManager #get should pass the body of the response to the &quot;then&quot; handler" time="0" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="JobsManager #get should perform a GET request to /api/v2/jobs" time="0" classname="should perform a GET request to /api/v2/jobs">
    </testcase>
    <testcase name="JobsManager #get should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="JobsManager #get should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#importUsers" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0.023000000000000003">
    <testcase name="JobsManager #importUsers should accept a callback" time="0.01" classname="should accept a callback">
    </testcase>
    <testcase name="JobsManager #importUsers should return a promise if no callback is given" time="0.003" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="JobsManager #importUsers should pass any errors to the promise catch handler" time="0.002" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="JobsManager #importUsers should perform a POST request to /api/v2/jobs/users-imports" time="0.002" classname="should perform a POST request to /api/v2/jobs/users-imports">
    </testcase>
    <testcase name="JobsManager #importUsers should be a multipart request" time="0.002" classname="should be a multipart request">
    </testcase>
    <testcase name="JobsManager #importUsers should have two parts: connection_id and users file" time="0.003" classname="should have two parts: connection_id and users file">
    </testcase>
    <testcase name="JobsManager #importUsers should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#verifyEmail" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/jobs.tests.js" failures="0" time="0.002">
    <testcase name="JobsManager #verifyEmail should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="JobsManager #verifyEmail should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="JobsManager #verifyEmail should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="JobsManager #verifyEmail should perform a POST request to /api/v2/jobs/verification-email" time="0" classname="should perform a POST request to /api/v2/jobs/verification-email">
    </testcase>
    <testcase name="JobsManager #verifyEmail should pass the data in the body of the request" time="0" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="JobsManager #verifyEmail should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="LogsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/logs.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/logs.tests.js" failures="0" time="0">
    <testcase name="LogsManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="LogsManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/logs.tests.js" failures="0" time="0.001">
    <testcase name="LogsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="LogsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="LogsManager #constructor should throw an error when the base URL is invalid" time="0.001" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/logs.tests.js" failures="0" time="0.003">
    <testcase name="LogsManager #getAll should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="LogsManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="LogsManager #getAll should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="LogsManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="LogsManager #getAll should perform a GET request to /api/v2/logs" time="0.001" classname="should perform a GET request to /api/v2/logs">
    </testcase>
    <testcase name="LogsManager #getAll should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="LogsManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/logs.tests.js" failures="0" time="0.001">
    <testcase name="LogsManager #get should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="LogsManager #get should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="LogsManager #get should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="LogsManager #get should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="LogsManager #get should perform a GET request to /api/v2/logs/:id" time="0" classname="should perform a GET request to /api/v2/logs/:id">
    </testcase>
    <testcase name="LogsManager #get should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="LogsManager #get should pass the parameters in the query-string" time="0" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="ManagementClient" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/management-client.tests.js" failures="0" time="0.001">
    <testcase name="ManagementClient should raise an error when no options object is provided" time="0" classname="should raise an error when no options object is provided">
    </testcase>
    <testcase name="ManagementClient should raise an error when the token is not valid" time="0.001" classname="should raise an error when the token is not valid">
    </testcase>
    <testcase name="ManagementClient should raise an error when the domain is not valid" time="0" classname="should raise an error when the domain is not valid">
    </testcase>
  </testsuite>
  <testsuite name="instance properties" timestamp="2017-06-16T20:59:48" tests="11" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/management-client.tests.js" failures="0" time="0.001">
    <testcase name="ManagementClient instance properties should expose an instance of UsersManager" time="0" classname="should expose an instance of UsersManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of BlacklistedTokensManager" time="0" classname="should expose an instance of BlacklistedTokensManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of ClientsManager" time="0" classname="should expose an instance of ClientsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of ClientGrantsManager" time="0" classname="should expose an instance of ClientGrantsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of ConnectionsManager" time="0.001" classname="should expose an instance of ConnectionsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of DeviceCredentialsManager" time="0" classname="should expose an instance of DeviceCredentialsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of EmailProviderManager" time="0" classname="should expose an instance of EmailProviderManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of JobsManager" time="0" classname="should expose an instance of JobsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of RulesManager" time="0" classname="should expose an instance of RulesManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of StatsManager" time="0" classname="should expose an instance of StatsManager">
    </testcase>
    <testcase name="ManagementClient instance properties should expose an instance of TenantManager" time="0" classname="should expose an instance of TenantManager">
    </testcase>
  </testsuite>
  <testsuite name="instance methods" timestamp="2017-06-16T20:59:48" tests="38" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/management-client.tests.js" failures="0" time="0">
    <testcase name="ManagementClient instance methods should have a getConnections method" time="0" classname="should have a getConnections method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createConnection method" time="0" classname="should have a createConnection method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getConnection method" time="0" classname="should have a getConnection method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteConnection method" time="0" classname="should have a deleteConnection method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateConnection method" time="0" classname="should have a updateConnection method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getClients method" time="0" classname="should have a getClients method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getClient method" time="0" classname="should have a getClient method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createClient method" time="0" classname="should have a createClient method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateClient method" time="0" classname="should have a updateClient method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteClient method" time="0" classname="should have a deleteClient method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getClientGrants method" time="0" classname="should have a getClientGrants method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createClientGrant method" time="0" classname="should have a createClientGrant method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateClientGrant method" time="0" classname="should have a updateClientGrant method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteClientGrant method" time="0" classname="should have a deleteClientGrant method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createDevicePublicKey method" time="0" classname="should have a createDevicePublicKey method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getDeviceCredentials method" time="0" classname="should have a getDeviceCredentials method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteDeviceCredential method" time="0" classname="should have a deleteDeviceCredential method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getRules method" time="0" classname="should have a getRules method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createRule method" time="0" classname="should have a createRule method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getRule method" time="0" classname="should have a getRule method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteRule method" time="0" classname="should have a deleteRule method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateRule method" time="0" classname="should have a updateRule method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getUsers method" time="0" classname="should have a getUsers method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getUser method" time="0" classname="should have a getUser method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteAllUsers method" time="0" classname="should have a deleteAllUsers method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteUsers method" time="0" classname="should have a deleteUsers method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a createUser method" time="0" classname="should have a createUser method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateUser method" time="0" classname="should have a updateUser method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getBlacklistedTokens method" time="0" classname="should have a getBlacklistedTokens method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a blacklistToken method" time="0" classname="should have a blacklistToken method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getEmailProvider method" time="0" classname="should have a getEmailProvider method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a configureEmailProvider method" time="0" classname="should have a configureEmailProvider method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a deleteEmailProvider method" time="0" classname="should have a deleteEmailProvider method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateEmailProvider method" time="0" classname="should have a updateEmailProvider method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getActiveUsersCount method" time="0" classname="should have a getActiveUsersCount method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getDailyStats method" time="0" classname="should have a getDailyStats method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a getTenantSettings method" time="0" classname="should have a getTenantSettings method">
    </testcase>
    <testcase name="ManagementClient instance methods should have a updateTenantSettings method" time="0" classname="should have a updateTenantSettings method">
    </testcase>
  </testsuite>
  <testsuite name="ResourceServersManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="4" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0">
    <testcase name="ResourceServersManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
    <testcase name="ResourceServersManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="ResourceServersManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="ResourceServersManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.001">
    <testcase name="ResourceServersManager #constructor should error when no options are provided" time="0.001" classname="should error when no options are provided">
    </testcase>
    <testcase name="ResourceServersManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="ResourceServersManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.005">
    <testcase name="ResourceServersManager #getAll should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ResourceServersManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ResourceServersManager #getAll should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ResourceServersManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ResourceServersManager #getAll should perform a GET request to /api/v2/resource-servers" time="0" classname="should perform a GET request to /api/v2/resource-servers">
    </testcase>
    <testcase name="ResourceServersManager #getAll should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.010000000000000002">
    <testcase name="ResourceServersManager #get should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ResourceServersManager #get should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ResourceServersManager #get should pass any errors to the promise catch handler" time="0.006" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ResourceServersManager #get should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="ResourceServersManager #get should perform a GET request to /api/v2/resource-servers/:id" time="0.001" classname="should perform a GET request to /api/v2/resource-servers/:id">
    </testcase>
    <testcase name="ResourceServersManager #get should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.003">
    <testcase name="ResourceServersManager #create should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="ResourceServersManager #create should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ResourceServersManager #create should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ResourceServersManager #create should perform a POST request to /api/v2/resource-servers" time="0" classname="should perform a POST request to /api/v2/resource-servers">
    </testcase>
    <testcase name="ResourceServersManager #create should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="ResourceServersManager #create should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.005">
    <testcase name="ResourceServersManager #update should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ResourceServersManager #update should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="ResourceServersManager #update should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ResourceServersManager #update should perform a PATCH request to /api/v2/resource-servers/:id" time="0.001" classname="should perform a PATCH request to /api/v2/resource-servers/:id">
    </testcase>
    <testcase name="ResourceServersManager #update should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="ResourceServersManager #update should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/resource-servers.tests.js" failures="0" time="0.002">
    <testcase name="ResourceServersManager #delete should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="ResourceServersManager #delete should return a promise when no callback is given" time="0.001" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="ResourceServersManager #delete should perform a DELETE request to /resource-servers/5" time="0" classname="should perform a DELETE request to /resource-servers/5">
    </testcase>
    <testcase name="ResourceServersManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="ResourceServersManager #delete should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="RulesManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0">
    <testcase name="RulesManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
    <testcase name="RulesManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="RulesManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="RulesManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="RulesManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0">
    <testcase name="RulesManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="RulesManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="RulesManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0.006">
    <testcase name="RulesManager #getAll should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="RulesManager #getAll should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="RulesManager #getAll should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="RulesManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.004" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="RulesManager #getAll should perform a GET request to /api/v2/rules" time="0" classname="should perform a GET request to /api/v2/rules">
    </testcase>
    <testcase name="RulesManager #getAll should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="RulesManager #getAll should pass the parameters in the query-string" time="0" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0.002">
    <testcase name="RulesManager #get should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="RulesManager #get should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="RulesManager #get should perform a POST request to /api/v2/rules/5" time="0" classname="should perform a POST request to /api/v2/rules/5">
    </testcase>
    <testcase name="RulesManager #get should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="RulesManager #get should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0.002">
    <testcase name="RulesManager #create should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="RulesManager #create should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="RulesManager #create should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="RulesManager #create should perform a POST request to /api/v2/rules" time="0.001" classname="should perform a POST request to /api/v2/rules">
    </testcase>
    <testcase name="RulesManager #create should pass the data in the body of the request" time="0" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="RulesManager #create should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0.003">
    <testcase name="RulesManager #update should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="RulesManager #update should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="RulesManager #update should perform a PATCH request to /api/v2/rules/5" time="0" classname="should perform a PATCH request to /api/v2/rules/5">
    </testcase>
    <testcase name="RulesManager #update should include the new data in the body of the request" time="0.002" classname="should include the new data in the body of the request">
    </testcase>
    <testcase name="RulesManager #update should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/rules.tests.js" failures="0" time="0.003">
    <testcase name="RulesManager #delete should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="RulesManager #delete should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="RulesManager #delete should perform a delete request to /rules/5" time="0.001" classname="should perform a delete request to /rules/5">
    </testcase>
    <testcase name="RulesManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="RulesManager #delete should include the token in the authorization header" time="0.001" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
  <testsuite name="StatsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/stats.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/stats.tests.js" failures="0" time="0">
    <testcase name="StatsManager instance should have a getActiveUsersCount method" time="0" classname="should have a getActiveUsersCount method">
    </testcase>
    <testcase name="StatsManager instance should have a getDaily method" time="0" classname="should have a getDaily method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/stats.tests.js" failures="0" time="0.001">
    <testcase name="StatsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="StatsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="StatsManager #constructor should throw an error when the base URL is invalid" time="0.001" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getDaily" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/stats.tests.js" failures="0" time="0.012">
    <testcase name="StatsManager #getDaily should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="StatsManager #getDaily should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="StatsManager #getDaily should pass any errors to the promise catch handler" time="0.009" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="StatsManager #getDaily should pass the body of the response to the &quot;then&quot; handler" time="0" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="StatsManager #getDaily should perform a GET request to /api/v2/stats/daily" time="0.001" classname="should perform a GET request to /api/v2/stats/daily">
    </testcase>
    <testcase name="StatsManager #getDaily should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="StatsManager #getDaily should pass the parameters in the query-string" time="0" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#getActiveUsersCount" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/stats.tests.js" failures="0" time="0.003">
    <testcase name="StatsManager #getActiveUsersCount should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="StatsManager #getActiveUsersCount should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="StatsManager #getActiveUsersCount should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="StatsManager #getActiveUsersCount should perform a GET request to /api/v2/stats/active-users" time="0" classname="should perform a GET request to /api/v2/stats/active-users">
    </testcase>
    <testcase name="StatsManager #getActiveUsersCount should pass the token data in the body of the request" time="0.001" classname="should pass the token data in the body of the request">
    </testcase>
    <testcase name="StatsManager #getActiveUsersCount should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="TenantManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tenant.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tenant.tests.js" failures="0" time="0">
    <testcase name="TenantManager instance should have a updateSettings method" time="0" classname="should have a updateSettings method">
    </testcase>
    <testcase name="TenantManager instance should have a getSettings method" time="0" classname="should have a getSettings method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tenant.tests.js" failures="0" time="0">
    <testcase name="TenantManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="TenantManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="TenantManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getSettings" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tenant.tests.js" failures="0" time="0.011">
    <testcase name="TenantManager #getSettings should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="TenantManager #getSettings should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="TenantManager #getSettings should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="TenantManager #getSettings should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="TenantManager #getSettings should perform a GET request to /api/v2/tenants/settings" time="0" classname="should perform a GET request to /api/v2/tenants/settings">
    </testcase>
    <testcase name="TenantManager #getSettings should include the token in the Authorization header" time="0.008" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="TenantManager #getSettings should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#updateSettings" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tenant.tests.js" failures="0" time="0.003">
    <testcase name="TenantManager #updateSettings should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="TenantManager #updateSettings should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="TenantManager #updateSettings should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="TenantManager #updateSettings should perform a PATCH request to /api/v2/tenants/settings" time="0" classname="should perform a PATCH request to /api/v2/tenants/settings">
    </testcase>
    <testcase name="TenantManager #updateSettings should pass the data in the body of the request" time="0" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="TenantManager #updateSettings should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="TicketsManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tickets.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="2" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tickets.tests.js" failures="0" time="0">
    <testcase name="TicketsManager instance should have a changePassword method" time="0" classname="should have a changePassword method">
    </testcase>
    <testcase name="TicketsManager instance should have a verifyEmail method" time="0" classname="should have a verifyEmail method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tickets.tests.js" failures="0" time="0">
    <testcase name="TicketsManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="TicketsManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="TicketsManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#verifyEmail" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tickets.tests.js" failures="0" time="0.004">
    <testcase name="TicketsManager #verifyEmail should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="TicketsManager #verifyEmail should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="TicketsManager #verifyEmail should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="TicketsManager #verifyEmail should perform a POST request to /api/v2tickets/email-verification" time="0" classname="should perform a POST request to /api/v2tickets/email-verification">
    </testcase>
    <testcase name="TicketsManager #verifyEmail should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="TicketsManager #verifyEmail should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#changePassword" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/tickets.tests.js" failures="0" time="0.004">
    <testcase name="TicketsManager #changePassword should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="TicketsManager #changePassword should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="TicketsManager #changePassword should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="TicketsManager #changePassword should perform a POST request to /api/v2tickets/email-verification" time="0" classname="should perform a POST request to /api/v2tickets/email-verification">
    </testcase>
    <testcase name="TicketsManager #changePassword should pass the data in the body of the request" time="0.001" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="TicketsManager #changePassword should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="UsersManager" timestamp="2017-06-16T20:59:48" tests="0" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0">
  </testsuite>
  <testsuite name="instance" timestamp="2017-06-16T20:59:48" tests="13" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0">
    <testcase name="UsersManager instance should have a get method" time="0" classname="should have a get method">
    </testcase>
    <testcase name="UsersManager instance should have a getAll method" time="0" classname="should have a getAll method">
    </testcase>
    <testcase name="UsersManager instance should have a create method" time="0" classname="should have a create method">
    </testcase>
    <testcase name="UsersManager instance should have a update method" time="0" classname="should have a update method">
    </testcase>
    <testcase name="UsersManager instance should have a delete method" time="0" classname="should have a delete method">
    </testcase>
    <testcase name="UsersManager instance should have a deleteAll method" time="0" classname="should have a deleteAll method">
    </testcase>
    <testcase name="UsersManager instance should have a unlink method" time="0" classname="should have a unlink method">
    </testcase>
    <testcase name="UsersManager instance should have a link method" time="0" classname="should have a link method">
    </testcase>
    <testcase name="UsersManager instance should have a logs method" time="0" classname="should have a logs method">
    </testcase>
    <testcase name="UsersManager instance should have a deleteMultifactorProvider method" time="0" classname="should have a deleteMultifactorProvider method">
    </testcase>
    <testcase name="UsersManager instance should have a updateUserMetadata method" time="0" classname="should have a updateUserMetadata method">
    </testcase>
    <testcase name="UsersManager instance should have a updateAppMetadata method" time="0" classname="should have a updateAppMetadata method">
    </testcase>
    <testcase name="UsersManager instance should have a getGuardianEnrollments method" time="0" classname="should have a getGuardianEnrollments method">
    </testcase>
  </testsuite>
  <testsuite name="#constructor" timestamp="2017-06-16T20:59:48" tests="3" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0">
    <testcase name="UsersManager #constructor should error when no options are provided" time="0" classname="should error when no options are provided">
    </testcase>
    <testcase name="UsersManager #constructor should throw an error when no base URL is provided" time="0" classname="should throw an error when no base URL is provided">
    </testcase>
    <testcase name="UsersManager #constructor should throw an error when the base URL is invalid" time="0" classname="should throw an error when the base URL is invalid">
    </testcase>
  </testsuite>
  <testsuite name="#getAll" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.003">
    <testcase name="UsersManager #getAll should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #getAll should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #getAll should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #getAll should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="UsersManager #getAll should perform a GET request to /api/v2/users" time="0" classname="should perform a GET request to /api/v2/users">
    </testcase>
    <testcase name="UsersManager #getAll should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
    <testcase name="UsersManager #getAll should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#get" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.005">
    <testcase name="UsersManager #get should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #get should return a promise if no callback is given" time="0.002" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #get should perform a POST request to /api/v2/users/5" time="0.001" classname="should perform a POST request to /api/v2/users/5">
    </testcase>
    <testcase name="UsersManager #get should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #get should include the token in the Authorization header" time="0" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#create" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.003">
    <testcase name="UsersManager #create should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #create should return a promise if no callback is given" time="0.001" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #create should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #create should perform a POST request to /api/v2/users" time="0.001" classname="should perform a POST request to /api/v2/users">
    </testcase>
    <testcase name="UsersManager #create should pass the data in the body of the request" time="0" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="UsersManager #create should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#update" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.005">
    <testcase name="UsersManager #update should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #update should return a promise if no callback is given" time="0.002" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #update should perform a PATCH request to /api/v2/users/5" time="0.001" classname="should perform a PATCH request to /api/v2/users/5">
    </testcase>
    <testcase name="UsersManager #update should include the new data in the body of the request" time="0.001" classname="should include the new data in the body of the request">
    </testcase>
    <testcase name="UsersManager #update should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
  </testsuite>
  <testsuite name="#delete" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.003">
    <testcase name="UsersManager #delete should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #delete should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="UsersManager #delete should perform a delete request to /users/USER_5" time="0.001" classname="should perform a delete request to /users/USER_5">
    </testcase>
    <testcase name="UsersManager #delete should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #delete should include the token in the authorization header" time="0.001" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#link" timestamp="2017-06-16T20:59:48" tests="6" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.006">
    <testcase name="UsersManager #link should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #link should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #link should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #link should perform a POST request to /api/v2/users" time="0.001" classname="should perform a POST request to /api/v2/users">
    </testcase>
    <testcase name="UsersManager #link should pass the data in the body of the request" time="0.002" classname="should pass the data in the body of the request">
    </testcase>
    <testcase name="UsersManager #link should include the token in the Authorization header" time="0.001" classname="should include the token in the Authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#unlink" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.002">
    <testcase name="UsersManager #unlink should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #unlink should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="UsersManager #unlink should perform a DELETE request to /users/u1/identities/auth0/u2" time="0.001" classname="should perform a DELETE request to /users/u1/identities/auth0/u2">
    </testcase>
    <testcase name="UsersManager #unlink should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #unlink should include the token in the authorization header" time="0" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#deleteMultifactorProvider" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.004">
    <testcase name="UsersManager #deleteMultifactorProvider should accept a callback" time="0.002" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #deleteMultifactorProvider should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="UsersManager #deleteMultifactorProvider should perform a DELETE request to /users/u1/multifactor/auth0" time="0.001" classname="should perform a DELETE request to /users/u1/multifactor/auth0">
    </testcase>
    <testcase name="UsersManager #deleteMultifactorProvider should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #deleteMultifactorProvider should include the token in the authorization header" time="0.001" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
  <testsuite name="#updateUserMetadata" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.003">
    <testcase name="UsersManager #updateUserMetadata should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #updateUserMetadata should return a promise if no callback is given" time="0" classname="should return a promise if no callback is given">
    </testcase>
    <testcase name="UsersManager #updateUserMetadata should perform a PATCH request to /api/v2/users/5" time="0.001" classname="should perform a PATCH request to /api/v2/users/5">
    </testcase>
    <testcase name="UsersManager #updateUserMetadata should include the metadata in the body of the request" time="0" classname="should include the metadata in the body of the request">
    </testcase>
    <testcase name="UsersManager #updateUserMetadata should pass any errors to the promise catch handler" time="0.001" classname="should pass any errors to the promise catch handler">
    </testcase>
  </testsuite>
  <testsuite name="#logs" timestamp="2017-06-16T20:59:48" tests="7" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.010000000000000002">
    <testcase name="UsersManager #logs should accept a callback" time="0" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #logs should return a promise when no callback is given" time="0.001" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="UsersManager #logs should perform a GET request to /users/user_id/logs" time="0.005" classname="should perform a GET request to /users/user_id/logs">
    </testcase>
    <testcase name="UsersManager #logs should pass any errors to the promise catch handler" time="0.002" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #logs should include the token in the authorization header" time="0" classname="should include the token in the authorization header">
    </testcase>
    <testcase name="UsersManager #logs should pass the body of the response to the &quot;then&quot; handler" time="0.001" classname="should pass the body of the response to the &quot;then&quot; handler">
    </testcase>
    <testcase name="UsersManager #logs should pass the parameters in the query-string" time="0.001" classname="should pass the parameters in the query-string">
    </testcase>
  </testsuite>
  <testsuite name="#getGuardianEnrollments" timestamp="2017-06-16T20:59:48" tests="5" file="/Users/hernan/Projects/Auth0/node-auth0/test/management/users.tests.js" failures="0" time="0.003">
    <testcase name="UsersManager #getGuardianEnrollments should accept a callback" time="0.001" classname="should accept a callback">
    </testcase>
    <testcase name="UsersManager #getGuardianEnrollments should return a promise when no callback is given" time="0" classname="should return a promise when no callback is given">
    </testcase>
    <testcase name="UsersManager #getGuardianEnrollments should perform a GET request to /api/v2/users/5/enrollments" time="0.001" classname="should perform a GET request to /api/v2/users/5/enrollments">
    </testcase>
    <testcase name="UsersManager #getGuardianEnrollments should pass any errors to the promise catch handler" time="0" classname="should pass any errors to the promise catch handler">
    </testcase>
    <testcase name="UsersManager #getGuardianEnrollments should include the token in the authorization header" time="0.001" classname="should include the token in the authorization header">
    </testcase>
  </testsuite>
</testsuites>